<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title></title>
	<link href="https://jxlxx.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jxlxx.org/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-02-06T00:00:00+00:00</updated>
	<id>https://jxlxx.org/atom.xml</id>
	<entry xml:lang="en">
		<title>(Vegetarian) Soup Dumplings 🥟</title>
		<published>2023-02-06T00:00:00+00:00</published>
		<updated>2023-02-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/soup-dumplings/" type="text/html"/>
		<id>https://jxlxx.org/posts/soup-dumplings/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Quantity:&lt;&#x2F;strong&gt; About ~40 dumplings, depending on how thin you roll out the dough.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ingredients-equipment&quot;&gt;Ingredients &#x2F; equipment&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;equipment&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;something bowl like to mix the dough&lt;&#x2F;li&gt;
&lt;li&gt;something like a rolling pin to roll out the dough&lt;&#x2F;li&gt;
&lt;li&gt;steamer (like a bamboo steamer)&lt;&#x2F;li&gt;
&lt;li&gt;parchment&#x2F;wax paper to rest the dumpling on in the steamer (or you can use something like Napa cabbage leaves) &lt;&#x2F;li&gt;
&lt;li&gt;big pot to cook the stock (and for steaming)&lt;&#x2F;li&gt;
&lt;li&gt;containers to pour the finished broth for when it is chilling in the fridge&lt;&#x2F;li&gt;
&lt;li&gt;a ladle could be helpful, but not critical&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;dough&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;400g all purpose flour&lt;&#x2F;li&gt;
&lt;li&gt;2 tsp salt&lt;&#x2F;li&gt;
&lt;li&gt;135 ml boiling water&lt;&#x2F;li&gt;
&lt;li&gt;135 ml room temp water&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;broth&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Essentials:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;~1.5L of vegetable stock (I strongly recommend using Better Than Bouillon)&lt;&#x2F;li&gt;
&lt;li&gt;1 tbs agar agar&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For flavour:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2 tbs olive oil&lt;&#x2F;li&gt;
&lt;li&gt;1 tbs sesame oil &lt;&#x2F;li&gt;
&lt;li&gt;1 tsp honey (to taste)&lt;&#x2F;li&gt;
&lt;li&gt;~1 head of garlic &lt;&#x2F;li&gt;
&lt;li&gt;2-3 inches of ginger&lt;&#x2F;li&gt;
&lt;li&gt;5 spicy chilis +&#x2F;- to taste &lt;&#x2F;li&gt;
&lt;li&gt;vegetarian oyster sauce (alternatively dried shitakis might be nice) &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;filling&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;(you can use anything, this is just what I had in  my fridge)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;3 tbs olive oil&lt;&#x2F;li&gt;
&lt;li&gt;1 pack of mushrooms&lt;&#x2F;li&gt;
&lt;li&gt;1 head of bok choy&lt;&#x2F;li&gt;
&lt;li&gt;1 pack medium form tofu&lt;&#x2F;li&gt;
&lt;li&gt;splash soy sauce (optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;dipping sauce&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;black rice vinegar&lt;&#x2F;li&gt;
&lt;li&gt;soy sauce&lt;&#x2F;li&gt;
&lt;li&gt;juilliened ginger&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;timeline-tips&quot;&gt;Timeline + tips&lt;&#x2F;h1&gt;
&lt;p&gt;Making the broth jello can be relatively quick (15 mins - 1 hour, depending on what you put inside)
but it has to chill in the fridge for &lt;strong&gt;at least 4-5 hours&lt;&#x2F;strong&gt;. 
You also prepare it in advance could leave in the fridge for a day of two.&lt;&#x2F;p&gt;
&lt;p&gt;You can also make the tofu&#x2F;etc filling in advance. Most recipes say to do it while the dough is 
resting, but I don&#x27;t think it matters (as long as it&#x27;s still tasty). Also if you make it in advance, 
you don&#x27;t have to worry about the residual heat melting the broth jello while you are assembling.&lt;&#x2F;p&gt;
&lt;p&gt;Once the dumplings are done, &lt;strong&gt;eat them asap&lt;&#x2F;strong&gt; (without buring yourself) because the broth absorbs 
into the dough&#x2F;filling very fast.&lt;&#x2F;p&gt;
&lt;p&gt;If you are using parchment paper while steaming, lightly oil the bottoms so they don&#x27;t stick to the paper after
they&#x27;re done steaming.&lt;&#x2F;p&gt;
&lt;p&gt;It may seem like a lot of oil in the broth&#x2F;filling but there is no other fat in the recipe.
And fat is flavour. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;making-the-broth-jello&quot;&gt;Making the broth jello&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go to flavour town&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;peel the garlic and ginger, and roughly chop. &lt;&#x2F;li&gt;
&lt;li&gt;cut the heads off the chilis. 
&lt;ul&gt;
&lt;li&gt;Chop if you want them to release more spice. Don&#x27;t if you don&#x27;t.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;heat ~2tbs of oil in a big pot at medium heat. &lt;&#x2F;li&gt;
&lt;li&gt;once hot, add the garlic, ginger chilis.&lt;&#x2F;li&gt;
&lt;li&gt;let them sear and release their flavours.
&lt;ul&gt;
&lt;li&gt;stir occasionally, but it&#x27;s okay if they get some nice brown marks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;add the sesame oil, stir&lt;&#x2F;li&gt;
&lt;li&gt;add the stock (or 1.5L water and 1 tbs Better than Bouillon)&lt;&#x2F;li&gt;
&lt;li&gt;bring to a boil, then back to medium&lt;&#x2F;li&gt;
&lt;li&gt;add some oyster sauce to taste (I added like 1-2 tsp)&lt;&#x2F;li&gt;
&lt;li&gt;add some honey&lt;&#x2F;li&gt;
&lt;li&gt;taste and adjust as you wish&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Make it thick&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;once the stock tastes perfect, add a 1 tbs of agar agar and mix well&lt;&#x2F;li&gt;
&lt;li&gt;turn off the heat&lt;&#x2F;li&gt;
&lt;li&gt;ladle (or pour) into some containers&lt;&#x2F;li&gt;
&lt;li&gt;(do not add the ginger&#x2F;garlic&#x2F;chilis)&lt;&#x2F;li&gt;
&lt;li&gt;cover and put in the fridge until solid (at least 4 hours probably)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;making-the-dough&quot;&gt;Making the dough&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;combine flour + salt in large bowl&lt;&#x2F;li&gt;
&lt;li&gt;make a well in the middle &lt;&#x2F;li&gt;
&lt;li&gt;add hot water in the well&lt;&#x2F;li&gt;
&lt;li&gt;mix with chopsticks to make a shaggy dough&lt;&#x2F;li&gt;
&lt;li&gt;pour the cold water over it and use your hand to bring it together to a ball&lt;&#x2F;li&gt;
&lt;li&gt;as soon as it is a ball, bring it to a floured work surface&lt;&#x2F;li&gt;
&lt;li&gt;knead until it is a uniform ball (7-10 minutes), smooth and slightly sticky&lt;&#x2F;li&gt;
&lt;li&gt;cover and let rest for at least 30 minutes&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;making-the-filling&quot;&gt;Making the filling&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;fry up whatever fillings you want&lt;&#x2F;li&gt;
&lt;li&gt;let it cool a bit (you don&#x27;t want to prematurely melt your broth jello)&lt;&#x2F;li&gt;
&lt;li&gt;dice the broth jello into cubes (at least 1-3 cm&lt;sup&gt;3&lt;&#x2F;sup&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;gently fold in the broth cubes in to the filling&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;making-the-dipping-sauce&quot;&gt;Making the dipping sauce&lt;&#x2F;h1&gt;
&lt;p&gt;mix equal parts black rice vinegar and soy sauce. Add some julienned ginger.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;assembling-the-dumplings&quot;&gt;Assembling the dumplings&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;split the dough into ~40 equal balls &lt;&#x2F;li&gt;
&lt;li&gt;roll out into a circle with about a 10cm (4&amp;quot;) diameter. They should be slightly thicker in the middle 
and thinner along the edges&lt;&#x2F;li&gt;
&lt;li&gt;Add a heaping tbs of filling (and at least 2 stock cubes) to each dumpling wrapper&lt;&#x2F;li&gt;
&lt;li&gt;fold into a perfect dumpling (&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;results?search_query=how+to+fold+a+soup+dumpling&quot;&gt;watch a youtube video or two before trying this maybe&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;cooking-the-dumplings&quot;&gt;Cooking the dumplings&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;bring a large pot of water to a boil&lt;&#x2F;li&gt;
&lt;li&gt;cover the bottom of the steamer with a few pieces of parchment paper (not one big one) or cabbage leaves &lt;&#x2F;li&gt;
&lt;li&gt;put the dumplings in the steamer (put as many as you can but don&#x27;t let them touch)&lt;&#x2F;li&gt;
&lt;li&gt;once the water is boiling, put the steamer on top&lt;&#x2F;li&gt;
&lt;li&gt;steam for 8-10 minutes&lt;&#x2F;li&gt;
&lt;li&gt;done&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;eating-the-dumplings&quot;&gt;Eating the dumplings&lt;&#x2F;h1&gt;
&lt;p&gt;You can either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;wait a minute or two for the dumplings to cool and then eat them whole&lt;&#x2F;li&gt;
&lt;li&gt;immiediately poke a hole in them so the soup pours out, eat the dough and then drink the soup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also for the sauce:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pour the sauce on top&lt;&#x2F;li&gt;
&lt;li&gt;dip them in the sauce&lt;&#x2F;li&gt;
&lt;li&gt;no sauce&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Go Essentials</title>
		<published>2022-09-11T00:00:00+00:00</published>
		<updated>2022-09-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/go-essentials/" type="text/html"/>
		<id>https://jxlxx.org/posts/go-essentials/</id>
		<content type="html">&lt;h1 id=&quot;background&quot;&gt;Background&lt;&#x2F;h1&gt;
&lt;p&gt;Go was designed at Google. 
It is sometimes called Golang, but its official name is Go. 
However, if you are looking up any documentation&#x2F;StackOverflow stuff you will most likely have to say Golang instead of just Go.&lt;&#x2F;p&gt;
&lt;p&gt;Go is a statically typed, compiled, high-level language designed for concurrency.
One of the inventors of Go is Ken Thompson, the guy who invented the C programming language.
Go came about because Thompson and the others’ collective distaste for C++. Here is a quote from the guy:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;KT: Yes. When the three of us [Thompson, Rob Pike, and Robert Griesemer] got started, it was pure research. 
The three of us got together and decided that we hated C++. [laughter]&lt;&#x2F;strong&gt;
source: &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20130105013259&#x2F;https:&#x2F;&#x2F;www.drdobbs.com&#x2F;open-source&#x2F;interview-with-ken-thompson&#x2F;229502480&quot;&gt;interview with KT&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This post is intended to be a short reference to give programmers new to Go enough context to hit the ground running. &lt;&#x2F;p&gt;
&lt;p&gt;Go is actually a very simple language (in a good way) so it&#x27;s easy to get started if you have
some experience with any other typed and compiled language. I might even go as far as to say
that it is the easiest typed and compiled langauge to learn these days 😳&lt;&#x2F;p&gt;
&lt;p&gt;We will briefly talk about:&lt;&#x2F;p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#hello-shi-jie&quot;&gt;a simple &lt;code&gt;hello, world&lt;&#x2F;code&gt; example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#packages-and-modules&quot;&gt;packages and modules&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#defining-functions-methods-and-variables&quot;&gt;functions, methods, variables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#error-handling&quot;&gt;error handling&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#goroutines&quot;&gt;goroutines (and &lt;code&gt;defer&lt;&#x2F;code&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#channels&quot;&gt;channels (and &lt;code&gt;select&lt;&#x2F;code&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#waitgroups&quot;&gt;waitgroups&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#contexts&quot;&gt;contexts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#interfaces&quot;&gt;interfaces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#project-structure&quot;&gt;project structure&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#other&quot;&gt;gofmt (and &lt;code&gt;go.dev&#x2F;play&lt;&#x2F;code&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;hello-shi-jie&quot;&gt;Hello, 世界!&lt;&#x2F;h1&gt;
&lt;p&gt;First, let&#x27;s have a quick look at a simple &lt;code&gt;hello world&lt;&#x2F;code&gt; program in Go. 
You can go to &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;play&#x2F;&quot;&gt;https:&#x2F;&#x2F;go.dev&#x2F;play&#x2F;&lt;&#x2F;a&gt; to run it yourself.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Hello, 世界&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are 4 details that leap out at us immediately and lead to some natural questions.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We are looking at a &lt;strong&gt;package&lt;&#x2F;strong&gt; called &lt;code&gt;main&lt;&#x2F;code&gt; &lt;em&gt;(what is a package?)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We are &lt;strong&gt;importing&lt;&#x2F;strong&gt; something called &lt;code&gt;fmt&lt;&#x2F;code&gt; &lt;em&gt;(what is &lt;code&gt;fmt&lt;&#x2F;code&gt;?)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We are &lt;strong&gt;defining&lt;&#x2F;strong&gt; a function called &lt;code&gt;main&lt;&#x2F;code&gt; &lt;em&gt;(is there something special about the name &lt;code&gt;main&lt;&#x2F;code&gt;?)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We are &lt;strong&gt;calling&lt;&#x2F;strong&gt; a function from &lt;code&gt;fmt&lt;&#x2F;code&gt; called &lt;code&gt;Println&lt;&#x2F;code&gt; &lt;em&gt;(why is is capitalized?)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s start with answering those 4 burning questions, and then we will get into concurrency and other fancy stuff.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;packages-and-modules&quot;&gt;Packages and modules&lt;&#x2F;h1&gt;
&lt;p&gt;Go projects are composed of &lt;strong&gt;packages&lt;&#x2F;strong&gt;  and &lt;strong&gt;modules&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A package is a directory of Go files (&lt;code&gt;*.go&lt;&#x2F;code&gt;) that do something and are somehow related (ideally, but I guess you can do whatever you want).
All the files in a package contain the line: &lt;code&gt;package package_name&lt;&#x2F;code&gt;. In this case we have a &lt;code&gt;main&lt;&#x2F;code&gt; package,
probably defined in a file called &lt;code&gt;main.go&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 You can search for publicly available packages here: &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;&quot;&gt;pkg.go.dev&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;module&lt;&#x2F;strong&gt; is a collection of one or more go packages that is versioned and has dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;A module is identified by a &lt;strong&gt;module path&lt;&#x2F;strong&gt;, which is the &lt;em&gt;canonical name&lt;&#x2F;em&gt; for the module.
Module paths usually have two parts to them, the path part and the name part.
The path part specificies where the module is being imported from, of the module and the &lt;em&gt;name&lt;&#x2F;em&gt; is the just the name of the module.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the Gin web framework has a module path: &lt;code&gt;github.com&#x2F;gin-gonic&#x2F;gin&lt;&#x2F;code&gt;
The package is called &lt;code&gt;gin&lt;&#x2F;code&gt; and the code repository is hosted at &lt;code&gt;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But unless you are writing some open source Go software (in which case you really don&#x27;t need to be reading this article), you don&#x27;t have to 
worry about the path part. Many tutorials tell you to use &lt;code&gt;github.com&#x2F;&amp;lt;your_username&amp;gt;&#x2F;&amp;lt;package_name&amp;gt;&lt;&#x2F;code&gt;, but it&#x27;s not at all necessary when you are just learning
or working on your own small projects. This is the suggested path because it will prevent path collisions with other peoples packages when you are a wildly successful
open source dev. &lt;&#x2F;p&gt;
&lt;p&gt;However, your machine and the Go compiler need to know where you are keeping your go code and your imported packages. 
This information is stored in the &lt;code&gt;$GOPATH&lt;&#x2F;code&gt; environment variable. You can see all Go related environment variables with &lt;code&gt;go env&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;According the Go website, Go developers &lt;em&gt;usually&lt;&#x2F;em&gt; keep all their Go code&#x2F;projects in own directory called a &lt;strong&gt;Workspace&lt;&#x2F;strong&gt; (I do not. Ever heard of Nix, you nerds?).&lt;&#x2F;p&gt;
&lt;p&gt;For example, the workspace of a professional Go developer might look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── pkg &#x2F;&#x2F; contains compiled go packages that are
&lt;&#x2F;span&gt;&lt;span&gt;│       &#x2F;&#x2F; later used to create binary executable in bin
&lt;&#x2F;span&gt;&lt;span&gt;│
&lt;&#x2F;span&gt;&lt;span&gt;├── bin
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── company_app
&lt;&#x2F;span&gt;&lt;span&gt;│   └── personal_project
&lt;&#x2F;span&gt;&lt;span&gt;│
&lt;&#x2F;span&gt;&lt;span&gt;└── src
&lt;&#x2F;span&gt;&lt;span&gt;    ├── github.com&#x2F;my_company_github&#x2F;company_app
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── .git
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── ... go code
&lt;&#x2F;span&gt;&lt;span&gt;    │   
&lt;&#x2F;span&gt;&lt;span&gt;    └── github.com&#x2F;my_github&#x2F;personal_project
&lt;&#x2F;span&gt;&lt;span&gt;        ├── .git
&lt;&#x2F;span&gt;&lt;span&gt;        └── ... go code
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the &lt;code&gt;$GOPATH&lt;&#x2F;code&gt; should be set to that directory. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 There is some information on structuring individual Go projects here: &lt;a href=&quot;https:&#x2F;&#x2F;julio.lol&#x2F;posts&#x2F;go-essentials&#x2F;#project-structure&quot;&gt;# project structure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Anyways, back to modules.&lt;&#x2F;p&gt;
&lt;p&gt;Modules usually must have have a &lt;code&gt;go.mod&lt;&#x2F;code&gt; file, which defines the module path and the modules direct and indirect dependencies.
(Technically, you don&#x27;t &lt;em&gt;need&lt;&#x2F;em&gt; to have one, but I cannot think of a good reason why you wouldn&#x27;t).
The &lt;code&gt;go.mod&lt;&#x2F;code&gt; file is not meant to be created or edited by humans, although it is intended to be readable. 
There are lost of commands to work with &lt;code&gt;go.mod&lt;&#x2F;code&gt; files, but the two important ones are &lt;code&gt;go mod init&lt;&#x2F;code&gt; and &lt;code&gt;go mod tidy&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;go mod init&lt;&#x2F;code&gt; creates a module and generates &lt;code&gt;go.mod&lt;&#x2F;code&gt; file in your current repository. 
You can also optionally specify a module path like this: &lt;code&gt;go mod init some&#x2F;module&#x2F;path&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;go mod tidy&lt;&#x2F;code&gt; will look at the import statements in your code and add new dependencies and remove dependencies that are no longer needed.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Here are some other things you can go with &lt;code&gt;go mod&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;ref&#x2F;mod&quot;&gt;go.dev&#x2F;ref&#x2F;mod&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Modules also usually have a &lt;code&gt;go.sum&lt;&#x2F;code&gt; file, which conatins cryptographic hashes of the modules&#x27; direct and indirect dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;So in the end we have something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;└── hello-world
&lt;&#x2F;span&gt;&lt;span&gt;   ├── main.go
&lt;&#x2F;span&gt;&lt;span&gt;   ├── go.mod
&lt;&#x2F;span&gt;&lt;span&gt;   └── go.sum
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Is the word &lt;code&gt;main&lt;&#x2F;code&gt;, special? Yes, from the &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;ref&#x2F;spec#Program_execution&quot;&gt;Go language specification&lt;&#x2F;a&gt;: &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A complete program is created by linking a single, unimported package called the main package with all the packages it imports, transitively.
The main package must have package name main and declare a function main that takes no arguments and returns no value.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Program execution begins by initializing the main package and then invoking the function main. When that function invocation returns, 
the program exits. It does not wait for other (non-main) goroutines to complete.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-fmt-package&quot;&gt;The &lt;code&gt;fmt&lt;&#x2F;code&gt; package&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;fmt&lt;&#x2F;code&gt; (&amp;quot;format&amp;quot;) package is an I&#x2F;O package in the Go standard library.&lt;&#x2F;p&gt;
&lt;p&gt;It defines functions analogous to C&#x27;s &lt;code&gt;printf&lt;&#x2F;code&gt; and &lt;code&gt;scanf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;defining-functions-methods-and-variables&quot;&gt;Defining functions, methods and variables&lt;&#x2F;h1&gt;
&lt;p&gt;This is how you define a function in Go:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... code ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how you specify arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... code ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also be cool and do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;first_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;last_name &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... code ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how specify return types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... code ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; for multiple values, you need braces
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello_maybe&lt;&#x2F;span&gt;&lt;span&gt;() (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... code ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two ways to define methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Server &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ... fields
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello_value_reciever&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; doing some stuff 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;hello_pointer_reciever&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; doing some stuff and maybe changing things in s
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason you would you use &lt;code&gt;(s *Server)&lt;&#x2F;code&gt;, AKA a &lt;strong&gt;pointer reciever&lt;&#x2F;strong&gt;, is that it will allow you to make changes to the
caller, whereas you cannot change anything inside the caller if you are using a &lt;strong&gt;value reciever&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;public-and-private-functions&quot;&gt;Public and private functions&lt;&#x2F;h2&gt;
&lt;p&gt;Exposed values from other modules have to start with a capital. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; this is perfectly fine :)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;padString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; not allowed, that&amp;#39;s for `fmt` to know about, not you
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is also true for structs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Server &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;secret &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;NonSecret &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;variables-and-underscores&quot;&gt;Variables and underscores&lt;&#x2F;h2&gt;
&lt;p&gt;There are two ways to declare variables. Explicitly saying the type or not saying the type and letting the compiler figure it out.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; explicit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; implicit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;:=&lt;&#x2F;code&gt; means that the variable is being declared, aka set for the first time. When you are reassigning the value you do not use the colon.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;another thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have unused variables or imports, Go will complain and the build will fail. 
But while developing you can get around this by using underscores. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; don&amp;#39;t use the colon, because nothing is being declared.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;some_function&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Or, if you want one of the returned values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;used_var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;another_function&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also, you can use this technique to silence the unused imports error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; i&amp;#39;ll use this later
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also rename the packages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jxlxx&#x2F;superlongpackagename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;other_api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jxlxx&#x2F;superlongpackagename2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And also, you only need to say &lt;code&gt;import&lt;&#x2F;code&gt; once:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;error-handling&quot;&gt;Error Handling&lt;&#x2F;h1&gt;
&lt;p&gt;Typically in Go, you will see a pattern with errors over and over again.&lt;&#x2F;p&gt;
&lt;p&gt;Functions return: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the value you want &lt;&#x2F;li&gt;
&lt;li&gt;and maybe an error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By &lt;em&gt;maybe&lt;&#x2F;em&gt; I mean it will either return &lt;code&gt;nil&lt;&#x2F;code&gt; or an &lt;code&gt;error&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;SomeFunction &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;yourstring &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;yourstring &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;good string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;thanks, that&amp;#39;s a good string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;nil	
&lt;&#x2F;span&gt;&lt;span&gt;  } 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; bad string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;No thanks, bad string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, when you call a function you can either ignore the error 
(perhaps you know that the default value is fine) or handle it in some way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;SomeFunction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;good string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; here you will usually do something in response to the error and the
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; function will return early
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;an error!!!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; here you know that err == nil, so you can proceed with response
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has a tendency to make your functions really long, but that&#x27;s okay.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;goroutines&quot;&gt;Goroutines&lt;&#x2F;h1&gt;
&lt;p&gt;If you are using Go, you probably want to make use of concurrency. 
You can do this using goroutines, channels, and some other primitives that make life better. &lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;goroutine&lt;&#x2F;strong&gt; is a thread managed by the Go runtime. &lt;&#x2F;p&gt;
&lt;p&gt;This is how you call a goroutine with no name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; do stuff
&lt;&#x2F;span&gt;&lt;span&gt;}()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this is how you call a goroutine with a name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sleep_and_print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;this is called first but printed last&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sleep_and_print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;this is called last but printed first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;sleep_and_print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Isn&#x27;t that nice?&lt;&#x2F;p&gt;
&lt;p&gt;In the above code we had to call &lt;code&gt;time.Sleep(10000)&lt;&#x2F;code&gt; at the end of main because 
after the goroutines are called the main function keeps executing and exits without 
checking on whether the goroutines terminated or not. &lt;&#x2F;p&gt;
&lt;p&gt;Since go routines are managed by the go runtime, they are terminated when they return 
or when the program it’s self exits (&lt;code&gt;main&lt;&#x2F;code&gt; in this case). &lt;&#x2F;p&gt;
&lt;p&gt;Obviously, a sleep function is a terrible way to ensure 
that our functions get executed. To communicate across goroutines we can make use of 
&lt;strong&gt;channels&lt;&#x2F;strong&gt; and &lt;strong&gt;waitgroups&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Is it possible for goroutines to leak? Yes.&lt;&#x2F;p&gt;
&lt;p&gt;There are many techniques to monitor for goroutine leaks, but I wouldn’t say that they are 
essential to get started with Go. 
&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2017&#x2F;09&#x2F;24&#x2F;profiling-go-with-pprof&#x2F;#:~:text=pprof%20basics&amp;amp;text=The%20normal%20way%20to%20use,pprof%20to%20analyze%20said%20profile&quot;&gt;But here is something you can read, if you wish.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defer&quot;&gt;Defer&lt;&#x2F;h2&gt;
&lt;p&gt;Before getting into channels, etc. I want to mention a very lovely keyword &lt;code&gt;defer&lt;&#x2F;code&gt;. The &lt;code&gt;defer&lt;&#x2F;code&gt; keyword is 
placed before a function call and it “defers” the executing of the function until right before the function that it is being called in, returns. &lt;&#x2F;p&gt;
&lt;p&gt;All the deferred functions will get executed in the reverse order that they were deferred. 
So if I defer function A and then defer function B, then right before the function returns, 
B will be executed and then A will be executed.&lt;&#x2F;p&gt;
&lt;p&gt;First Deferred, Last Executed. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;A - deferred first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;B - deferred second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;C - first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;D - second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Output: 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; C - first
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; D - second
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; B - deferred second
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; A - deferred first
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;defer&lt;&#x2F;code&gt; is very useful when using channels as well, which we will get into soon.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;channels&quot;&gt;Channels&lt;&#x2F;h1&gt;
&lt;p&gt;A &lt;strong&gt;channel&lt;&#x2F;strong&gt; is a place to send and receive values in a way that is accessible to multiple goroutines.&lt;&#x2F;p&gt;
&lt;p&gt;You can have two kinds of channels: &lt;strong&gt;buffered&lt;&#x2F;strong&gt; and &lt;strong&gt;unbuffered&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;strong&gt;unbuffered channel&lt;&#x2F;strong&gt; means that you do not set a size limit when creating it, and it can grow freely.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;buffered channel&lt;&#x2F;strong&gt; means that you give it a limit on how large in can grow when you declare it. &lt;&#x2F;p&gt;
&lt;p&gt;This is how you create both kinds of channels: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;unbuffered_channel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;buffered_channel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;message_channel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan Message&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; perhaps I have a Message struct
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how you read and write from channels:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; adding a message to the channel
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;recieved_message&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; receiving a message from a channel
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;recieved_message&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can close channels like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, you do not always have to close channels. They are not like files. You close channels as a 
way to say to the goroutines using them that there are no more values that are going to be sent to 
the channel. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Link: &lt;a href=&quot;https:&#x2F;&#x2F;go101.org&#x2F;article&#x2F;channel-closing.html&quot;&gt;How to Gracefully Close Channels&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Buffered channels are also called &lt;strong&gt;asynchronous channels&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And unbuffered channels are also called &lt;strong&gt;synchronous channels&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Why? Well suppose  we made messages an unbuffered channel in the previous example, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; adding a message to the channel
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;recieved_message&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; receiving a message from a channel
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;recieved_message&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; fatal error: all goroutines are asleep - deadlock!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we ran this code we would get a fatal runtime error. This is due to the line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This line will block the execution of the rest of the code. &lt;&#x2F;p&gt;
&lt;p&gt;Receivers (&lt;code&gt;im_a_reciever&amp;lt;-&lt;&#x2F;code&gt;) always block and wait until there is data to recieve.&lt;&#x2F;p&gt;
&lt;p&gt;Once the receiver begins recieving data, the sender blocks (&lt;code&gt;&amp;lt;-im_a_sender&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the channel is unbuffered, the sender blocks &lt;strong&gt;until a receiver has read from the channel&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If the channel is buffered, it will only wait &lt;strong&gt;until the value is copied to the buffer&lt;&#x2F;strong&gt;. If the buffer is full, it must wait until
a reciever has read from the channel and &amp;quot;freed up some space&amp;quot; for more data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is why buffered channels are considered &lt;em&gt;asynchronous&lt;&#x2F;em&gt;, because they facilitate asynchonous communication among goroutines, since the
goroutines don&#x27;t need to consider if someone is reading what they are saying. They just go about their business.&lt;&#x2F;p&gt;
&lt;p&gt;If we wanted to make the channel unbuffered, we could do something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We start a goroutine that begins the message &lt;code&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;code&gt; to our channel. Since the channel is unbuffered, it is blocked until someone reads from the channel.&lt;&#x2F;p&gt;
&lt;p&gt;At &amp;quot;the same time&amp;quot;, we start a for loop the is looking at &lt;code&gt;messages&lt;&#x2F;code&gt;. It will keep trying to read from the &lt;code&gt;messages&lt;&#x2F;code&gt; channel, until it is closed.&lt;&#x2F;p&gt;
&lt;p&gt;Once the goroutine writes &lt;code&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;code&gt; to &lt;code&gt;messages&lt;&#x2F;code&gt;, the for loop proceeds to give us &lt;code&gt;i&lt;&#x2F;code&gt;, which is the value in the channel, &lt;code&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;code&gt; and we can print it with &lt;code&gt;fmt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now that &lt;code&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;code&gt; was read, the goroutine can proceed to the next step of executing, closing the channel, which which also terminal the for loop and thus terminate &lt;code&gt;main&lt;&#x2F;code&gt; successfully.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example where we don&#x27;t close the channel, but it doesn&#x27;t crash the program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;add_message_to_channel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;woo hoo recursion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;add_message_to_channel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;add_message_to_channel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because the blocking is happening in a goroutine and not in &lt;code&gt;main&lt;&#x2F;code&gt;, the Go runtime doesn&#x27;t care if the goroutine is 
doing something and will just kill it once main is done. In theory, Go will clean up for you, but this is ugly. 
Perhaps don&#x27;t do stuff like this.&lt;&#x2F;p&gt;
&lt;p&gt;You could use &lt;code&gt;defer&lt;&#x2F;code&gt; to close channels once a function is done with them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;add_message_to_channel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; once we read one message from messages (causing the 
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; function to close and return) we will never be able
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; to read from it again
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;add_message_to_channel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;messages &lt;&#x2F;span&gt;&lt;span&gt;{    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;select&quot;&gt;&lt;strong&gt;&lt;code&gt;select&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A critical keyword for working with channels is the &lt;code&gt;select&lt;&#x2F;code&gt; keyword.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;select&lt;&#x2F;code&gt; keyword is like a special switch case for channels which allows you to look at multiple 
channels at once and act of the first one to receive a value. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; original: https:&#x2F;&#x2F;gobyexample.com&#x2F;select
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; but I modified a bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;send this after 2 seconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;send this after 1 second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;case 1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;case 2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; case 2: send this after 1 second
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; case 1: send this after 2 seconds
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;waitgroups&quot;&gt;WaitGroups&lt;&#x2F;h1&gt;
&lt;p&gt;A &lt;code&gt;WaitGroup&lt;&#x2F;code&gt; is a really simple idea but really powerful. It allows you to safely control the 
behaviour of your goroutines in a really clean way.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;WaitGroup&lt;&#x2F;code&gt; is really just a fancy counter that allows you to stop you code from 
executing at a certain point until that counter reaches 0. &lt;&#x2F;p&gt;
&lt;p&gt;You instantiate a counter like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;WaitGroup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add to it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decrement like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and wait like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Usually, WaitGroups are used combination with defer and goroutines to wait until all the goroutines
have finished executing. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; source: https:&#x2F;&#x2F;gobyexample.com&#x2F;waitgroups
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;worker&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; starting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt; done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;WaitGroup
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;worker&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Output: 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; (Note that the order may change each time you run the program)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 5 starting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 2 starting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 1 starting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 3 starting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 4 starting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 1 done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 3 done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 2 done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 5 done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Worker 4 done
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Note that when you are passing a waitgroup you must do it by reference, 
otherwise a new WaitGroup will be created if you try to pass by value and 
there is no point of doing that!!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;contexts&quot;&gt;Contexts&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Contexts&lt;&#x2F;strong&gt; are another way to synchronise the behaviours of your goroutines. &lt;&#x2F;p&gt;
&lt;p&gt;With contexts you can:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Add a time out, which signals to all the goroutines which have access to the context to wrap things up&lt;&#x2F;li&gt;
&lt;li&gt;Or just manually signal to all goroutines to wrap things up by cancelling the context&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Note that you need to check if the context has actually expired or been cancelled, otherwise nothing happens.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are a few ways to to create a context: &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;With a deadline (a timestamp at which point the context will expire), &lt;&#x2F;li&gt;
&lt;li&gt;a timeout (a duration, which once elapsed after initialisation will cancel the context), &lt;&#x2F;li&gt;
&lt;li&gt;or a context with a cancel function which if used will allow you to cancel the context manually when every you want. &lt;&#x2F;li&gt;
&lt;li&gt;Or, none of these things (maybe you just need a dummy context for the moment)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;context#example-WithValue&quot;&gt;You can also pass values to contexts&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; source: https:&#x2F;&#x2F;pkg.go.dev&#x2F;context#example-WithTimeout
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;shortDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Millisecond
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Pass a context with a timeout to tell a blocking function that it
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; should abandon its work after the timeout elapses.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cancel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;WithTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Background&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;shortDuration&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;case &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;After&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;overslept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;case &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; prints &amp;quot;context deadline exceeded&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; context deadline exceeded
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;interfaces&quot;&gt;Interfaces&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Accept Interfaces, Return Structs - Jim&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Interfaces in go are essential.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;strong&gt;interface&lt;&#x2F;strong&gt; is a collection of method signatures.&lt;&#x2F;p&gt;
&lt;p&gt;If a type has implemented every method in an interface, than it is said to “&lt;em&gt;implement the interface&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Typically, you want interfaces to be small. You want them to be &lt;em&gt;easy&lt;&#x2F;em&gt; to implement.&lt;&#x2F;p&gt;
&lt;p&gt;The reason you might want to use an interface is that you want to use different types as
arguments to a function. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; source: https:&#x2F;&#x2F;gobyexample.com&#x2F;interfaces
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;geometry &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;perim&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;rect &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;circle &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;radius &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;rect&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;height
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;rect&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;perim&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;height
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;radius
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;perim&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbe3bf;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;radius
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;geometry&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;perim&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;rect&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;radius&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;interfaces-for-testing&quot;&gt;Interfaces for testing&lt;&#x2F;h2&gt;
&lt;p&gt;Interfaces also make unit testing a lot easier.&lt;&#x2F;p&gt;
&lt;p&gt;For example, maybe I will have an interface call &lt;code&gt;DatabaseClient&lt;&#x2F;code&gt; like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;DatabaseClient &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ReadFromDB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;WriteToDb&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then I can create two types which both implement the interface: &lt;code&gt;RealDBClient&lt;&#x2F;code&gt;and &lt;code&gt;MockDBClient&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;RealDBClient&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ReadFromDB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;RealDBClient&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;WriteToDb&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;str2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;MockDBClient&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ReadFromDB&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;MockDBClient&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;WriteToDb&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;str2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I can thoroughly and reliably test my database client implementation.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;project-structure&quot;&gt;Project Structure&lt;&#x2F;h1&gt;
&lt;p&gt;Go projects have modules and packages.&lt;&#x2F;p&gt;
&lt;p&gt;This is the basic structure for a Go web app.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;└── app-name
&lt;&#x2F;span&gt;&lt;span&gt;    │
&lt;&#x2F;span&gt;&lt;span&gt;    ├─── go.mod
&lt;&#x2F;span&gt;&lt;span&gt;    ├─── go.sum
&lt;&#x2F;span&gt;&lt;span&gt;    │
&lt;&#x2F;span&gt;&lt;span&gt;    ├── main.go
&lt;&#x2F;span&gt;&lt;span&gt;    │
&lt;&#x2F;span&gt;&lt;span&gt;    └─── packages
&lt;&#x2F;span&gt;&lt;span&gt;      ├── package-1
&lt;&#x2F;span&gt;&lt;span&gt;      │   ├── handlers.go
&lt;&#x2F;span&gt;&lt;span&gt;      │   └── handlers_test.go
&lt;&#x2F;span&gt;&lt;span&gt;      └── package-2
&lt;&#x2F;span&gt;&lt;span&gt;          ├── handlers.go
&lt;&#x2F;span&gt;&lt;span&gt;          └── handlers_test.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;app-name, whatever it is, is a module. &lt;&#x2F;p&gt;
&lt;p&gt;Typically you would have all your server code in &lt;code&gt;main.go&lt;&#x2F;code&gt;, and everything else in &lt;code&gt;&#x2F;packages&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another really common pattern is to use a &lt;code&gt;&#x2F;cmd&lt;&#x2F;code&gt; directory of all the &#x27;external&#x27; stuff. And &lt;code&gt;&#x2F;internal&lt;&#x2F;code&gt; all your helper functions&#x2F;business logic etc.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;└── app-name
&lt;&#x2F;span&gt;&lt;span&gt;    │
&lt;&#x2F;span&gt;&lt;span&gt;    ├─── go.mod
&lt;&#x2F;span&gt;&lt;span&gt;    ├─── go.sum
&lt;&#x2F;span&gt;&lt;span&gt;    │
&lt;&#x2F;span&gt;&lt;span&gt;    ├─── cmd
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── main.go
&lt;&#x2F;span&gt;&lt;span&gt;    │
&lt;&#x2F;span&gt;&lt;span&gt;    └─── internal
&lt;&#x2F;span&gt;&lt;span&gt;      ├── package-1
&lt;&#x2F;span&gt;&lt;span&gt;      │   ├── handlers.go
&lt;&#x2F;span&gt;&lt;span&gt;      │   └── handlers_test.go
&lt;&#x2F;span&gt;&lt;span&gt;      └── package-2
&lt;&#x2F;span&gt;&lt;span&gt;          ├── handlers.go
&lt;&#x2F;span&gt;&lt;span&gt;          └── handlers_test.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s okay to have files that are a thousand lines plus. Have you seen the error handling? c&#x27;mon.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;other&quot;&gt;Other&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;go-fmt&quot;&gt;&lt;strong&gt;&lt;code&gt;go fmt&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Go has a formatting tool that is very helpful.&lt;&#x2F;p&gt;
&lt;p&gt;In your directory containing your Go code, you can run &lt;code&gt;gofmt&lt;&#x2F;code&gt; to see what the formatter would like to change.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;gofmt -s&lt;&#x2F;code&gt; will also “simplify” your code&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;gofmt -w&lt;&#x2F;code&gt; will actually write the changes to file instead of just &lt;code&gt;stdout&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;gofmt -d&lt;&#x2F;code&gt; will display a diff to &lt;code&gt;stdout&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-playground&quot;&gt;Go Playground&lt;&#x2F;h2&gt;
&lt;p&gt;Another thing I recommend is using: &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;play&#x2F;&quot;&gt;https:&#x2F;&#x2F;go.dev&#x2F;play&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is a web service that will compile and run Go code, which is convenient when testing small things. 
And it is very easy to share code with it, so I have found it to be really useful testing and debugging alone and with other people.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;go routines (&lt;a href=&quot;https:&#x2F;&#x2F;gobyexample.com&#x2F;goroutines&quot;&gt;gobyexample.com&#x2F;goroutines&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;channels (&lt;a href=&quot;https:&#x2F;&#x2F;www.ardanlabs.com&#x2F;blog&#x2F;2017&#x2F;10&#x2F;the-behavior-of-channels.html&quot;&gt;Arden Labs - The behavior of channels&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;waitgroups (&lt;a href=&quot;https:&#x2F;&#x2F;gobyexample.com&#x2F;waitgroups&quot;&gt;gobyexample.com&#x2F;waitgroups&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;defer&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;gobyexample.com&#x2F;defer&quot;&gt;gobyexample.com&#x2F;defer&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;context&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;www.ardanlabs.com&#x2F;blog&#x2F;2019&#x2F;09&#x2F;context-package-semantics-in-go.html&quot;&gt;Ardan Labs - Context package semantics in go&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;best practices and smarter explainations (&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;doc&#x2F;effective_go&quot;&gt;Effective Go&lt;&#x2F;a&gt;)
&lt;ul&gt;
&lt;li&gt;this doc has been froxen since January 2022, but I still like it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;ref&#x2F;spec&quot;&gt;Go language spec&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;very nice reading&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>AWS CDK Basics</title>
		<published>2022-07-20T00:00:00+00:00</published>
		<updated>2022-07-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/06-aws-cdk-basics/" type="text/html"/>
		<id>https://jxlxx.org/posts/06-aws-cdk-basics/</id>
		<content type="html">&lt;h1 id=&quot;what-is-cdk&quot;&gt;What is CDK?&lt;&#x2F;h1&gt;
&lt;p&gt;Cloud Development Kit.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine… You are running some kind of software business.&lt;&#x2F;p&gt;
&lt;p&gt;You’re most likely not self-hosting, and instead using some kind of cloud provider.&lt;&#x2F;p&gt;
&lt;p&gt;Something like: AWS, GCP, Digital Ocean, Linode… etc.&lt;&#x2F;p&gt;
&lt;p&gt;What are the kinds of services you need? &lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Domain Name&lt;&#x2F;th&gt;&lt;th&gt;Route53&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;SSL&lt;&#x2F;td&gt;&lt;td&gt;Certificate Manager&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CDN&lt;&#x2F;td&gt;&lt;td&gt;CloudFront&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Static Assets, etc&lt;&#x2F;td&gt;&lt;td&gt;S3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Database&lt;&#x2F;td&gt;&lt;td&gt;RDS, Dynamo, Aurora, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Authentication&lt;&#x2F;td&gt;&lt;td&gt;Cognito&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;REST API&lt;&#x2F;td&gt;&lt;td&gt;API Gateway&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Business Logic Stuff&lt;&#x2F;td&gt;&lt;td&gt;Lambda, EC2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Container management&lt;&#x2F;td&gt;&lt;td&gt;ECR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;You also probably want a Dev, Stag, and Prod stack.&lt;&#x2F;p&gt;
&lt;p&gt;So a CDK is code that you write, which generates CloudFormation Templates (JSON or YAML), which you push to AWS CloudFormation, and then that builds your AWS infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;And CloudFormation Templates are ANNOYING. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-to-start-a-cdk-project&quot;&gt;How to start a CDK project&lt;&#x2F;h1&gt;
&lt;p&gt;Get the code: &lt;code&gt;git checkout v1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Every CDK app should be in its own directory.&lt;&#x2F;p&gt;
&lt;p&gt;For this tutorial, all my code is in &lt;code&gt;&#x2F;BackendGuild&lt;&#x2F;code&gt;. So I did:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; CDKWorkshop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;CDK apps can be written in a bunch of languages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;typescript&lt;&#x2F;li&gt;
&lt;li&gt;javascript&lt;&#x2F;li&gt;
&lt;li&gt;python&lt;&#x2F;li&gt;
&lt;li&gt;java&lt;&#x2F;li&gt;
&lt;li&gt;C#&lt;&#x2F;li&gt;
&lt;li&gt;Go&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I went with typescript because it has types, everyone can understand it, and it has the most examples and documentation out of all the languages listed by a huuuuge margin. &lt;&#x2F;p&gt;
&lt;p&gt;Globally install &lt;code&gt;aws-cdk&lt;&#x2F;code&gt; and &lt;code&gt;typescript&lt;&#x2F;code&gt; with &lt;code&gt;npm&lt;&#x2F;code&gt;. You also need the &lt;code&gt;aws-cli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk init app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;language typescript
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;project-structure&quot;&gt;Project Structure&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lib&#x2F;name-stack.ts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# where you spend most of your time
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# where the CDK main stack is defined
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;bin&#x2F;name.ts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# enypoint of the CDK app
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# loads the stack defined in ^^
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# call stuff in lib and instantiate it
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;package.json  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# npm module manifest, build&#x2F;run scripts etc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk.json      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# &amp;quot;toolkit&amp;quot; how to run your app
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;tsconfig.json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# typescript configuration
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;node_modules&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# project dependencies
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;2 directories&lt;&#x2F;li&gt;
&lt;li&gt;node dependency folder&lt;&#x2F;li&gt;
&lt;li&gt;a bunch of config files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;a-note-on-the-lingo&quot;&gt;A note on the lingo&lt;&#x2F;h2&gt;
&lt;p&gt;Everything that the init command just created is called a CDK app.&lt;&#x2F;p&gt;
&lt;p&gt;Inside the app there are “stacks”&lt;&#x2F;p&gt;
&lt;p&gt;Inside the stacks there are “constructs”&lt;&#x2F;p&gt;
&lt;h1 id=&quot;simple-example&quot;&gt;Simple Example&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;bin&#x2F;name.ts&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;CdkWorkshopStack &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;..&#x2F;lib&#x2F;cdk-workshop-stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;cdk.App();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;CdkWorkshopStack(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;CdkWorkshopStack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is load and instantiate the &lt;code&gt;name&lt;&#x2F;code&gt; stack.&lt;&#x2F;p&gt;
&lt;p&gt;Who cares. Moving on.&lt;&#x2F;p&gt;
&lt;p&gt;Now let’s look at &lt;code&gt;lib&#x2F;name-stack.ts&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&#x2F;aws-sns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;subs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&#x2F;aws-sns-subscriptions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sqs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&#x2F;aws-sqs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;CdkWorkshopStack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;cdk.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#8cdaff;&quot;&gt;Stack &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;cdk.App, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span&gt;cdk.StackProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;sqs.Queue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;CdkWorkshopQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;      visibilityTimeout: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;sns.Topic(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;CdkWorkshopTopic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;addSubscription&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;subs.SqsSubscription(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does three main things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Creates an SQS Queue&lt;&#x2F;li&gt;
&lt;li&gt;SNS Topic&lt;&#x2F;li&gt;
&lt;li&gt;Subscribes the &lt;code&gt;1&lt;&#x2F;code&gt; to receive any messages published to &lt;code&gt;2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;scope-id-and-props&quot;&gt;&lt;code&gt;scope&lt;&#x2F;code&gt; , &lt;code&gt;id&lt;&#x2F;code&gt;, and &lt;code&gt;props&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;scope&lt;&#x2F;code&gt; is always the first argument in which constructs are created. Usually you just pass in &lt;code&gt;this&lt;&#x2F;code&gt;, because you want to define constructs with the current construct.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;id&lt;&#x2F;code&gt; is the local identity of the construct, a unique way to refer to it with its scope.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;props&lt;&#x2F;code&gt; are initialization properties. The lambda props accepts properties like &lt;code&gt;runtime&lt;&#x2F;code&gt;, &lt;code&gt;code&lt;&#x2F;code&gt;, &lt;code&gt;handler&lt;&#x2F;code&gt; name.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;our-example-creating-an-s3-bucket&quot;&gt;Our example: creating an S3 bucket&lt;&#x2F;h1&gt;
&lt;p&gt;First of all I had to add a couple environment variables:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CDK_DEFAULT_ACCOUNT&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CDK_DEFAULT_REGION&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then I ran &lt;code&gt;cdk synth&lt;&#x2F;code&gt; to see if everything looked good.&lt;&#x2F;p&gt;
&lt;p&gt;Then I ran &lt;code&gt;cdk bootstrap&lt;&#x2F;code&gt; which creates a “bootstrap stack” for the app.&lt;&#x2F;p&gt;
&lt;p&gt;Now I have a bunch of roles, a bucket, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk&lt;&#x2F;span&gt;&lt;span&gt; deploy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now lets add some changes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Construct &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;constructs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;aws_s3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;s3 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;CdkWorkshopStack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;cdk.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#8cdaff;&quot;&gt;Stack &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Construct, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span&gt;cdk.StackProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;s3.Bucket(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;MyThirdBucket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;        versioned: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        removalPolicy: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;RemovalPolicy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;DESTROY&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        autoDeleteObjects: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then run &lt;code&gt;cdk diff&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-else-can-you-do&quot;&gt;What else can you do?&lt;&#x2F;h1&gt;
&lt;p&gt;Check the docs: &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;cdk&#x2F;api&#x2F;v2&#x2F;docs&#x2F;aws-cdk-lib.aws_s3.Bucket.html&quot;&gt;class Bucket (construct) · AWS CDK&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;important-commands&quot;&gt;Important Commands&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;cdk bootstrap&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;This installs a “bootstrap stack” of AWS stuff that will be used to create your stack&lt;&#x2F;li&gt;
&lt;li&gt;This stack includes resources that are used in the toolkit’s operation&lt;&#x2F;li&gt;
&lt;li&gt;For example, you can store code in an S3 bucket and use that during the deployment process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;cdk synth&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;generates the cloudformation templates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;cdk deploy&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;actually deploys to &lt;code&gt;aws&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;cdk diff&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;if you make changes to the &lt;code&gt;cdk&lt;&#x2F;code&gt; this will show you what’s been changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;cdk deploy --hotswap&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;this will try to update the infrastructure you currently have with any changes you make&lt;&#x2F;li&gt;
&lt;li&gt;for example if you want to disable versioning for a bucket or change it’s privacy settings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;cdk watch&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;this will watch your code for changes and try to deploy if it can&lt;&#x2F;li&gt;
&lt;li&gt;but you can only make asset changes&lt;&#x2F;li&gt;
&lt;li&gt;for example you cannot disable&#x2F;enable versioning but you can adda picture&#x2F;data to the contents of the bucket&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;note: These commands deliberately introduces drift in CloudFormation stacks in order to speed up deployments.&lt;&#x2F;p&gt;
&lt;p&gt;Drift is when you cloud formation templates don’t match your actual stack.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cdk destroy&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;destroys stuff 💀 &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-is-aws-lambda&quot;&gt;What is AWS Lambda&lt;&#x2F;h1&gt;
&lt;p&gt;AWS Lambda is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. &lt;&#x2F;p&gt;
&lt;p&gt;What do you need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a name&lt;&#x2F;li&gt;
&lt;li&gt;a trigger&lt;&#x2F;li&gt;
&lt;li&gt;code (either a script or an executable in a zip)&lt;&#x2F;li&gt;
&lt;li&gt;a runtime&lt;&#x2F;li&gt;
&lt;li&gt;(optional) layers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-is-a-layer&quot;&gt;What is a layer?&lt;&#x2F;h2&gt;
&lt;p&gt;A layer is a ZIP archive that contains libraries, a custom runtime, or other dependencies. With layers, you can use libraries in your function without needing to include them in your deployment package.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;let-s-use-lambda&quot;&gt;Let’s use lambda&lt;&#x2F;h1&gt;
&lt;p&gt;Adding an AWS lambda function&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;create a directory &lt;code&gt;lambda&lt;&#x2F;code&gt; in the root of the CDK app&lt;&#x2F;li&gt;
&lt;li&gt;add a line to &lt;code&gt;.gitignore&lt;&#x2F;code&gt; to NOT ignore all the &lt;code&gt;.js&lt;&#x2F;code&gt; files in lambda&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;!lambda&#x2F;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;add the following js file, &lt;code&gt;lambda&#x2F;hello.js&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= async &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;request:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecfdb9;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;(event, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    statusCode: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    headers: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;text&#x2F;plain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    body: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Hello, CDK! You&amp;#39;ve hit ${event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a lambda function that always returns the text &lt;strong&gt;“Hello, CDK! You’ve hit [url path]”&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To define an AWS Lambda function you need to use the &lt;strong&gt;AWS Construct Library.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The construct library is divided into modules.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&#x2F;aws-lambda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;CdkWorkshopStack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;cdk.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#8cdaff;&quot;&gt;Stack &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;cdk.App, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span&gt;cdk.StackProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; defines an AWS Lambda resource
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;lambda.Function(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;HelloHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;      runtime: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Runtime&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;NODEJS_16_X&lt;&#x2F;span&gt;&lt;span&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; runtime
&lt;&#x2F;span&gt;&lt;span&gt;      code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Code&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;fromAsset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; code loaded from our &amp;quot;lambda&amp;quot; directory
&lt;&#x2F;span&gt;&lt;span&gt;      handler: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello.handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; file is &amp;quot;hello&amp;quot;, function is &amp;quot;handler&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;testing-lambda&quot;&gt;Testing Lambda&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;go to test menu&lt;&#x2F;li&gt;
&lt;li&gt;select an apigateway-aws-proxy test from the drop down&lt;&#x2F;li&gt;
&lt;li&gt;hit test&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;using-cdk-watch&quot;&gt;Using CDK watch&lt;&#x2F;h1&gt;
&lt;p&gt;Note: since it is a typescript project and we are using javascript in the lambda function, we have to update &lt;code&gt;cdk.json&lt;&#x2F;code&gt; to not exclude the files&lt;&#x2F;p&gt;
&lt;h1 id=&quot;adding-rest-trigger&quot;&gt;Adding REST trigger&lt;&#x2F;h1&gt;
&lt;p&gt;To actually interact with a lambda function from outside of the AWS console you have to give it some kind of trigger.&lt;&#x2F;p&gt;
&lt;p&gt;An obvious example would be, watching for uploads to an S3 bucket.&lt;&#x2F;p&gt;
&lt;p&gt;What we can also do is expose a rest api call that call the lambda function. &lt;&#x2F;p&gt;
&lt;p&gt;The most sensible way to do that would be to use API Gateway, an AWS service to expose public HTTP endpoints.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cdk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&#x2F;aws-lambda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8942;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;apigw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;aws-cdk-lib&#x2F;aws-apigateway&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;CdkWorkshopStack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;cdk.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;font-style:italic;color:#8cdaff;&quot;&gt;Stack &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;cdk.App, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span&gt;cdk.StackProps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; defines an AWS Lambda resource
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fbdfb5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;lambda.Function(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;HelloHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;      runtime: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Runtime&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;NODEJS_14_X&lt;&#x2F;span&gt;&lt;span&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; execution environment
&lt;&#x2F;span&gt;&lt;span&gt;      code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Code&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8cdaff;&quot;&gt;fromAsset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; code loaded from &amp;quot;lambda&amp;quot; directory
&lt;&#x2F;span&gt;&lt;span&gt;      handler: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;hello.handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; file is &amp;quot;hello&amp;quot;, function is &amp;quot;handler&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; defines an API Gateway REST API resource backed by our &amp;quot;hello&amp;quot; function.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;apigw.LambdaRestApi(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d699ff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;      handler: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;life-lessons&quot;&gt;Life Lessons&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;GUIs suck (I always knew this actually)&lt;&#x2F;li&gt;
&lt;li&gt;“use things the way they are intended to be used” - paraphrasing jim&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;questions-thoughts&quot;&gt;Questions &amp;amp; Thoughts&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;terraform-vs-cdks&quot;&gt;Terraform vs. CDKs&lt;&#x2F;h2&gt;
&lt;p&gt;Disclaimer: i don’t know what I’m talking about.&lt;&#x2F;p&gt;
&lt;p&gt;Terraform uses a JSON-like language to define resources and other data, the HCL, or HashiCorp Configuration Language.&lt;&#x2F;p&gt;
&lt;p&gt;CDKs use code which then generates CloudFormation Templates in Json&#x2F;yaml.&lt;&#x2F;p&gt;
&lt;p&gt;Terraform works on a lot of platforms, CDK is AWS specific.&lt;&#x2F;p&gt;
&lt;p&gt;Terraform is more reusable. You can “reuse” CDK code but you cannot “create your own modules”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cuelang-would-be-interesting-for-this-kinda-thing-i-think&quot;&gt;Cuelang would be interesting for this kinda thing I THINK&lt;&#x2F;h2&gt;
&lt;p&gt;Disclaimer: i don’t know what I’m talking about here either. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cuelang.org&#x2F;&quot;&gt;CUE (Configure Unify Execute)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Not a “full” programming language. It’s kinda like Jsonnet.&lt;&#x2F;p&gt;
&lt;p&gt;CUE is written in Go.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The CUE language has an unusual property which sets it apart from many other languages and formats - types and values are the same. &lt;em&gt;Not the same as only same type of structure, like JSON and JSON Schema,&lt;&#x2F;em&gt; &lt;strong&gt;&lt;em&gt;but actually the same&lt;&#x2F;em&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;An aws example I found:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tidycloudaws.com&#x2F;take-a-cue-to-supercharge-your-configurations&#x2F;&quot;&gt;Take a cue to supercharge your configurations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Can create reusable definitions.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;fun-fact&quot;&gt;Fun Fact&lt;&#x2F;h1&gt;
&lt;p&gt;I went to a golang meetup last week and this guy pronounced &lt;code&gt;fmt&lt;&#x2F;code&gt; as &lt;em&gt;fumpt&lt;&#x2F;em&gt; 😳&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Networking Basics</title>
		<published>2022-06-14T00:00:00+00:00</published>
		<updated>2022-06-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/04-networking-basics/" type="text/html"/>
		<id>https://jxlxx.org/posts/04-networking-basics/</id>
		<content type="html">&lt;h1 id=&quot;hardware-basics&quot;&gt;Hardware Basics&lt;&#x2F;h1&gt;
&lt;p&gt;A &lt;strong&gt;router&lt;&#x2F;strong&gt; is a networking device (that may be composed of many virtual network devices) that connects multiple devices, phones, computers, etc, to form a local area network (LAN). Most routers allow devices to connect wirelessly or through Ethernet.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;strong&gt;access point&lt;&#x2F;strong&gt;, often shortened to just &lt;strong&gt;AP&lt;&#x2F;strong&gt; allows devices to connect wirelessly to a Local Area Network, &lt;strong&gt;LAN&lt;&#x2F;strong&gt; and can also be used to extend the range of coverage to connect to a LAN (you can be physically farther away). The AP then also has a high-speed Ethernet cable runs to a router. (There is also such a thing as WAPs, wireless access points).&lt;&#x2F;p&gt;
&lt;p&gt;A router acts as a hub for a LAN, and an AP is a sub-device in the LAN. Routers can act as APs, but not all APs can act as routers.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;modem&lt;&#x2F;strong&gt; is a device that connects your LAN to a WAN (Wide Area Network). It is the thing that takes the digital signals that devices send to routers (binary data) and transforms it via modulation into analog data (electricity) that gets transmitted to the WAN. It also receives analog data and demodulates it, so the router can send it to the devices that asked for it. &lt;&#x2F;p&gt;
&lt;p&gt;It is not uncommon to see router&#x2F;modem combos.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;switch&lt;&#x2F;strong&gt; is a networking device that connects devices together. Usually physically, via ethernet cables. The word switch usually means a device that forwards data between devices at the layer 2 level using MAC addresses. There is such a thing as layer 3 switches, which incorporate some routing functionality. Routers usually have a kind of switch built-in to them. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;types-of-networks&quot;&gt;Types of Networks&lt;&#x2F;h1&gt;
&lt;p&gt;The internet is a network of networks. &lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;Local Area Network (LAN)&lt;&#x2F;strong&gt; is a small private network. For example, all the devices (computers, phones, tablets) in your home connected to your wifi network comprise a LAN. &lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;Metropolitan Area Network (MAN)&lt;&#x2F;strong&gt; is the network of a town or city.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;Wide Area Network (WAN)&lt;&#x2F;strong&gt; is a very large network owned and maintained by multiple stakeholders.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;layers-osi-model&quot;&gt;Layers (OSI Model)&lt;&#x2F;h1&gt;
&lt;p&gt;Networking is electricity on wires. And it&#x27;s data. But it is also protocols. And it is also packets. And servers. And sometime data is encrypted and sometimes it&#x27;s compressed. And different data moves differently. Point is that there&#x27;s lots of ways to talk about networking, and there&#x27;s lots of lays of abstraction. 
The same data can be discussed in many ways, and most people use the OSI model as a guide. So when people are saying L2, L4 – it is usually in reference to the OSI model.&lt;&#x2F;p&gt;
&lt;p&gt;OSI model stands for &lt;strong&gt;Open Systems Interconnection model&lt;&#x2F;strong&gt;, but nobody knows that or ever says it out loud.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;&#x2F;th&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;things that happen&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;Application&lt;&#x2F;td&gt;&lt;td&gt;What the user interacts with, http, ftp&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;Presentation&lt;&#x2F;td&gt;&lt;td&gt;Handler encryption, decryption, compression, decompression.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;Session&lt;&#x2F;td&gt;&lt;td&gt;channels, called sessions, between devices.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;Transport&lt;&#x2F;td&gt;&lt;td&gt;TCP, UDP&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Network&lt;&#x2F;td&gt;&lt;td&gt;Deciding what physical path the packets will take&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Data Link&lt;&#x2F;td&gt;&lt;td&gt;define the format of the data&#x2F;packets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;Physical&lt;&#x2F;td&gt;&lt;td&gt;the physical bit, electricity on a wire kind of shit&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Although the OSI model gets all the attention, there&#x27;s actually other models. TCP&#x2F;IP, the protocol that runs the internet, actually has it&#x27;s own model defined in &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc1122&quot;&gt;RFC 1122&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc1123&quot;&gt;RFC 1123&lt;&#x2F;a&gt;. It is a simpler model with only 4 layers.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;#&lt;&#x2F;th&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;OSI Layers&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;Application&lt;&#x2F;td&gt;&lt;td&gt;Application (7) + Presentation (6) + Session (5)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Transport&lt;&#x2F;td&gt;&lt;td&gt;Transport (4)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Internet&lt;&#x2F;td&gt;&lt;td&gt;Network (3)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;Link&lt;&#x2F;td&gt;&lt;td&gt;Link (2)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Personally, this makes more sense to because I don&#x27;t know enough about the details of OSI layers 5 through 7 to consider them separate layers.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ip-addresses-ipv4-ipv6&quot;&gt;IP Addresses, IPv4, IPv6&lt;&#x2F;h1&gt;
&lt;p&gt;IP addresses are strings of numbers that correspond to a unique device on &lt;em&gt;some&lt;&#x2F;em&gt; network. &lt;&#x2F;p&gt;
&lt;p&gt;IPv4 addresses are made of 32 bits which usually organized into 4 bytes (also sometimes, thought rarely, called octets).&lt;&#x2F;p&gt;
&lt;p&gt;IPv6 addresses are made of 128 bits and usually written in hex.&lt;&#x2F;p&gt;
&lt;p&gt;If you have lots of zeros, you may omit them.&lt;&#x2F;p&gt;
&lt;p&gt;Pairs of equivalent IPv6 addresses:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;2001:0db8:c9d2:0012:0000:0000:0000:0051
&lt;&#x2F;span&gt;&lt;span&gt;2001:db8:c9d2:12::51
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;2001:0db8:ab00:0000:0000:0000:0000:0000
&lt;&#x2F;span&gt;&lt;span&gt;2001:db8:ab00::
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;0000:0000:0000:0000:0000:0000:0000:0001
&lt;&#x2F;span&gt;&lt;span&gt;::1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The address &lt;code&gt;::1&lt;&#x2F;code&gt; is the &lt;em&gt;loopback address&lt;&#x2F;em&gt;. It always means &lt;em&gt;this machine I’m running on now&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;In IPv4, the loopback address is &lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There’s an IPv4-compatibility mode for IPv6 addresses. To represent the IPv4 address &lt;code&gt;192.0.2.33&lt;&#x2F;code&gt; as an IPv6 address you write it like this: &lt;code&gt;::ffff:192.0.2.33&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;packets-frames-etc&quot;&gt;Packets, Frames, Etc.&lt;&#x2F;h1&gt;
&lt;p&gt;Data is bytes.&lt;&#x2F;p&gt;
&lt;p&gt;To share data through a network, there needs to be a common protocol that everyone agrees on, and data bytes must be in a specific format.&lt;&#x2F;p&gt;
&lt;p&gt;The most used data units in networks are the &lt;strong&gt;packet&lt;&#x2F;strong&gt;, &lt;strong&gt;frame&lt;&#x2F;strong&gt;, and &lt;strong&gt;datagram&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The word packet is often used as a catchall term for all the previously mention data units as well as others, but when you say packet and you want to refer to a specify type of packet called a packet, you probably mean an internet packet (IP).&lt;&#x2F;p&gt;
&lt;p&gt;Internet Packets are used for connection-oriented protocols.&lt;&#x2F;p&gt;
&lt;p&gt;Data is divided into packets, sent over the internet, then recombined to recreate the original data at its destination.&lt;&#x2F;p&gt;
&lt;p&gt;Packets are data units with the network layer (L3) of OSI.&lt;&#x2F;p&gt;
&lt;p&gt;There are limits to the size of IP packets. It is defined by something called MTU, a Maximum Transmitted Unit. If packets are bigger than the MTU of a network, then they are broken up into smaller pieces of data called fragments. The network layer (L3) is also responsible for fragmentation.&lt;&#x2F;p&gt;
&lt;p&gt;Packets have &lt;code&gt;DF&lt;&#x2F;code&gt; flag, “Don’t Fragment.” If the &lt;code&gt;DF&lt;&#x2F;code&gt; flag is set to 1, and the size of the packet is bigger than the MTU of the packet, the packet is discarded. &lt;&#x2F;p&gt;
&lt;p&gt;Next there are frames.&lt;&#x2F;p&gt;
&lt;p&gt;The main difference between a packet and a frame is its association with the OSI layers. While a packet is used in the network layer, a frame is a unit of data in the data link layer. Frames are used by Ethernet.&lt;&#x2F;p&gt;
&lt;p&gt;A frame contains more information about the transmitted message than a packet. Like some flags, MAC addresses, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Datagrams are used for connectionless protocols like UDP.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sockets&quot;&gt;Sockets&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Sockets are the endpoints of communication.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Socket is a big word. Like packets, its a bit of a catch-all. However in networking we are usually we are talking about Internet Sockets.&lt;&#x2F;p&gt;
&lt;p&gt;A socket allows programs to communicate to each other by using &lt;strong&gt;Unix file descriptors&lt;&#x2F;strong&gt;, sometimes over a network. &lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;file descriptor&lt;&#x2F;strong&gt; is just an integer associated with an open file. &lt;&#x2F;p&gt;
&lt;p&gt;That file can be anything: a network connection, a pipe a terminal, a picture of a cat, whatever. This comes from the Unix philosophy that &lt;em&gt;everything in Unix is a file&lt;&#x2F;em&gt;. When Unix systems do any kind of I&#x2F;O the do so by reading or writing to a file descriptor.&lt;&#x2F;p&gt;
&lt;p&gt;Internet sockets are also called DARPA Internet addresses. But no one says that.&lt;&#x2F;p&gt;
&lt;p&gt;There are also many types of internet sockets, but we are going to talk about two kinds: &lt;strong&gt;Stream Sockets&lt;&#x2F;strong&gt; and &lt;strong&gt;Datagram Sockets&lt;&#x2F;strong&gt;. (Another interesting, and very powerful type of internet socket is a &lt;strong&gt;Raw Socket&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Stream sockets&lt;&#x2F;strong&gt; are reliable &lt;strong&gt;two-way&lt;&#x2F;strong&gt; connected internet streams. Things get output the same order they were input. Stream sockets use a protocol called &lt;strong&gt;Transmission Control Protocol, TCP&lt;&#x2F;strong&gt;. TCP makes ensures data arrive sequentially and error-free.&lt;&#x2F;p&gt;
&lt;p&gt;TCP is often heard when saying &lt;strong&gt;TCP&#x2F;IP&lt;&#x2F;strong&gt;. IP stands for Internet Protocol and primarily deals with internet routing and is not concerned with data integrity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Datagram sockets&lt;&#x2F;strong&gt; don’t care about order. They don’t care if they arrive where they are supposed to or not. If it does arrive though, the data in the packet will be error-free. Datagrams also use IP for routing, but they don’t use TCP, they use UDP. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wanna hear a joke about UDP? ...nevermind you probably wouldn&#x27;t get it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;socket address&lt;&#x2F;strong&gt; is usually a combination of a file descriptor, an IP address and a port number. TCP&#x2F;IP creates socket addresses that is unique throughout all Internet networks. Those socket addresses are used to read data on one machine and write it on another, and transmit that data via packets.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;routing&quot;&gt;Routing&lt;&#x2F;h1&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wifi-networks-security&quot;&gt;WiFi Networks &amp;amp; Security&lt;&#x2F;h1&gt;
&lt;p&gt;First of all, WiFi stands for nothing. Annoying.&lt;&#x2F;p&gt;
&lt;p&gt;WPA stands for Wifi Protected Access. WPA, WPA2, and WPA3 are security certification programs developed by the wifi alliance to secure wireless computer networks. Routers use WPA* to communicate wirelessly with devices and then send that data off into the WAN.
WPA is broken, we mostly use WPA2 now.&lt;&#x2F;p&gt;
&lt;p&gt;TLS stand for Transport Layer Security. It is the newer version and successor of (the now depreciated) Secure Sockets Layer (SSL). It is used, most commonly, in securing HTTPS.  (HTTPS means HTTP over SSL&#x2F;TLS).
We are now at TLS 1.3, released in 2018. TLS 1.2 was released in 2008, TLS 1.1 in 2006, and TLS 1.0 in 1999.&lt;&#x2F;p&gt;
&lt;p&gt;TLS&#x2F;SSL use certificates to provide privacy&#x2F;confidentiality, integrity, and authenticity. It runs in the application layer and it composed of two layers itself the TLS record and the TLS handshake protocols.&lt;&#x2F;p&gt;
&lt;p&gt;TLS certificates are a type of digital certificate issued by a CA (Certificate Authority).
Digital certificates (aka identity certificates or public key certificates) are digital files used to certify the ownership of a public key.
Each TLS certificate consists of a key pair made of a public key and private key.
The server shares its TLS&#x2F;SSL certificate and its public key with the client to establish a secure connection and a unique session key.&lt;&#x2F;p&gt;
&lt;p&gt;TTLS stands for tunnelled TLS. &lt;&#x2F;p&gt;
&lt;p&gt;Tunnelling in networking refers to the encapsulation of packets: wrapping packets inside of other packets.
Tunnelling can be used to set up secure connections between networks, enable the usage of unsupported protocols, and sometimes bypass firewalls.&lt;&#x2F;p&gt;
&lt;p&gt;Packets can be split into 2 parts: the header and the payload. The header indicates the packets destination (among other things) and the payload is the actual content. To encapsulate packet A into packet B, the header and payload of packet A become the payload of packet B.&lt;&#x2F;p&gt;
&lt;p&gt;A VPN (virtual private network) is a secure, encrypted connection over a public network. Basically you send data over an insecure network (anyone can connect and listen in) and encapsulate your packets and encrypt their payloads. Spilt tunnelling is when you route some of your data through your VPN and some through some other network.&lt;&#x2F;p&gt;
&lt;p&gt;Secure Shell Tunnel.&lt;&#x2F;p&gt;
&lt;p&gt;The difference between VPN and SSH tunnels is that in VPN tunnelling, the security comes from altering the data that you want to send and sending through an insecure medium. In SSH, you create a private network (via a public network) and then send your data through a secure channel, so your data doesn’t necessarily need to be encrypted. Another difference is that VPN runs in the transport layer, while SSH runs in the application layer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;more&quot;&gt;More&lt;&#x2F;h1&gt;
&lt;p&gt;Hosting etc. services&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;console&#x2F;&quot;&gt;AWS (free tier)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;&quot;&gt;GCP (free tier)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;&quot;&gt;Linode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cheap and decent domain name registrar:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.namecheap.com&#x2F;&quot;&gt;Namecheap.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;VPN&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tailscale.com&#x2F;&quot;&gt;TailScale&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;juanfont&#x2F;headscale&quot;&gt;HeadScale&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Online Books&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hpbn.co&#x2F;&quot;&gt;High Performance Browser Networking (O&#x27;Reilly)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;beej.us&#x2F;guide&#x2F;bgnet&#x2F;&quot;&gt;Beej&#x27;s Guide to Network Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Julia Evan&#x27;s Legendary Zines&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;networking-zine-coloured.pdf&quot;&gt;Networking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;tcpdump-zine.pdf&quot;&gt;tcpdump&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cool Web Tools&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;messwithdns.net&#x2F;&quot;&gt;messwithdns.net&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dns-lookup.jvns.ca&#x2F;&quot;&gt;dns-lookup.jvns.ca&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>RADIUS Servers and AAA Basics</title>
		<published>2022-05-29T00:00:00+00:00</published>
		<updated>2022-05-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/03-radius-basics/" type="text/html"/>
		<id>https://jxlxx.org/posts/03-radius-basics/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;free&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;Radius??? Maybe for you... It has cost me everything.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;what-is-radius&quot;&gt;What is RADIUS?&lt;&#x2F;h1&gt;
&lt;p&gt;RADIUS is a network protocol.&lt;&#x2F;p&gt;
&lt;p&gt;Servers that accept and send the RADIUS protocol are called radius servers.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone who has used the internet has probably interacted with a radius server. They are commonly used by ISPs, cellular network providers, and corporate&#x2F;educational networks.&lt;&#x2F;p&gt;
&lt;p&gt;The primary functions of RADIUS is usually referred to as AAA.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Authentication
&lt;ul&gt;
&lt;li&gt;are the users&#x2F;devices who they say they are?&lt;&#x2F;li&gt;
&lt;li&gt;validate some credentials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Authorization
&lt;ul&gt;
&lt;li&gt;are the users&#x2F;devices allowed to use the network?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Accounting
&lt;ul&gt;
&lt;li&gt;track the usage of the network by users&#x2F;devices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For example, Eduroam uses RADIUS servers.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re trying to wrap your mind around OpenRoaming, just think about how Eduroam works.&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;eduroam.org&#x2F;how&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;wballiance.com&#x2F;openroaming&#x2F;how-it-works&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;Here is a quick sketch of the physical hardware is involved:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Component&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Hardware&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;User&#x2F;device&lt;&#x2F;td&gt;&lt;td&gt;Requests access to the network&lt;&#x2F;td&gt;&lt;td&gt;laptop, phone, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Network Access Server (NAS)&lt;&#x2F;td&gt;&lt;td&gt;Provides access to the network&lt;&#x2F;td&gt;&lt;td&gt;Router, Switch, Access Point, VPN Terminator, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RADIUS Server&lt;&#x2F;td&gt;&lt;td&gt;Receives authentication requests from the NAS. Returns authorization information to NAS. Recieves accounting information.&lt;&#x2F;td&gt;&lt;td&gt;freeRADIUS, diameter, Radiator, ISE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;An important word to note is a NAS. A user&#x2F;client&#x2F;device interacts with something refered to as a NAS (Network Access Server) which is something like a router (but could be other things) and that device is what reaches out to the Radius server.&lt;&#x2F;p&gt;
&lt;p&gt;Another important word is &lt;strong&gt;realm&lt;&#x2F;strong&gt;. A realm tells radius what group&#x2F;organization a user belongs to. Realms are reminisant of email addresses and are used in a somewhat similar way.&lt;&#x2F;p&gt;
&lt;p&gt;The format of a realm is &lt;code&gt;&amp;lt;USER-STRING&amp;gt;@&amp;lt;REALM&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-freeradius&quot;&gt;What is FreeRadius?&lt;&#x2F;h1&gt;
&lt;p&gt;The most commonly used radius server is the freeRadius server. &lt;&#x2F;p&gt;
&lt;p&gt;Setting up a freeRadius server consists of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;editing various configuration files&lt;&#x2F;li&gt;
&lt;li&gt;and including&#x2F;excluding the right files. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To run a freeRadius server you must:	&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;put the config files in a file system where freeRadius is expecting them&lt;&#x2F;li&gt;
&lt;li&gt;install the freeRadius software on a local machine, server, or container&lt;&#x2F;li&gt;
&lt;li&gt;run it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a simple example directory for a freeRadius configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;raddb&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    mods-available&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    mods-enabled&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    sites-available&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    sites-enabled&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    clients.conf
&lt;&#x2F;span&gt;&lt;span&gt;    proxy.conf
&lt;&#x2F;span&gt;&lt;span&gt;    radiusd.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything lives inside of a &lt;code&gt;raddb&#x2F;&lt;&#x2F;code&gt; folder.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;mods-available&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;directory contains sample configurations for all of the modules.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;mods-enabled&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;enabled modules; sometimes these are just softlinks to the equivalent file in &lt;code&gt;mods-avaliable&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;mods-config&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;extra configuration for modules&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sites-available&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;this contains sample &amp;quot;virtual servers&amp;quot;. Most of these will not be used. They exist as documentation and as examples of &amp;quot;best practices&amp;quot;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sites-enabled&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;this contains the configuration for &amp;quot;virtual servers&amp;quot; that are being used by the server.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The rest of the conf files allow to define how the server listens to requests and what it does with with them.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;radiusd.conf&lt;&#x2F;code&gt; file contains the server configuration.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;proxy.conf&lt;&#x2F;code&gt; file controls the servers behaviour towards ALL other servers to which it sends proxy requests.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;clients.conf&lt;&#x2F;code&gt; file defines RADIUS clients (usually a NAS, Access Point, etc.) by specifying parts and protocols.&lt;&#x2F;p&gt;
&lt;p&gt;In general the syntax of the configuration files looks something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server name_of_server {
&lt;&#x2F;span&gt;&lt;span&gt;	an_authentication_mod
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	huh {
&lt;&#x2F;span&gt;&lt;span&gt;		WHAT
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But it depends on what you are configuring exactly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sections&quot;&gt;Sections&lt;&#x2F;h2&gt;
&lt;p&gt;Configuration files are broken up into something called &amp;quot;sections&amp;quot; or sometimes &amp;quot;blocks.&amp;quot;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;this_is_a_section {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some important sections:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server&lt;&#x2F;code&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;client&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;security&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;logging&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;... etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some important subsections with a &lt;code&gt;server&lt;&#x2F;code&gt; section:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;authorize&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;authenticate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pre-accounting&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;accounting&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;post-accounting&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;proxy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;... etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;helpful-freeradius-documentation&quot;&gt;Helpful FreeRadius Documentation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;networkradius.com&#x2F;doc&#x2F;FreeRADIUS%20Technical%20Guide.pdf&quot;&gt;Technical Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.freeradius.org&#x2F;guide&#x2F;Getting%20Started&quot;&gt;Getting Started FreeRadius&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;authentication&quot;&gt;Authentication&lt;&#x2F;h1&gt;
&lt;p&gt;The radius server receives a request and decides what to do with it. It decides based on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;what authentication types you have enabled in the server&lt;&#x2F;li&gt;
&lt;li&gt;what the server can look up in a DB&lt;&#x2F;li&gt;
&lt;li&gt;what’s in the request&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The server starts by querying the modules in the authorize section:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unix&lt;&#x2F;code&gt; module, can you do this?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pap&lt;&#x2F;code&gt; module, can you do this?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mschap&lt;&#x2F;code&gt; module can you do this?&lt;&#x2F;li&gt;
&lt;li&gt;etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Until there is some kind of match by one of the modules.
A module will find a match by searching the request for key attributes, such as &lt;code&gt;MS-CHAP-Challenge&lt;&#x2F;code&gt; (for &lt;code&gt;mschap&lt;&#x2F;code&gt;) or &lt;code&gt;EAP-Message&lt;&#x2F;code&gt; (for &lt;code&gt;eap&lt;&#x2F;code&gt;), etc.
If the module does find a match, it sets the &lt;code&gt;Auth-Type&lt;&#x2F;code&gt; to itself.
For example, suppose that the user sent a request with a &lt;code&gt;User-Password&lt;&#x2F;code&gt; attribute and &lt;code&gt;pap&lt;&#x2F;code&gt; is enabled. The pap module will have set &lt;code&gt;Auth-Type=pap&lt;&#x2F;code&gt;.
At the end of the authorize step, the server will check if anything set the &lt;code&gt;Auth-Type&lt;&#x2F;code&gt; if not, it will immediately reject the request.&lt;&#x2F;p&gt;
&lt;p&gt;If anything is missing or in the wrong form?  → reject 🗑&lt;&#x2F;p&gt;
&lt;p&gt;The naming of the &lt;code&gt;authorize&lt;&#x2F;code&gt; section is kind of misleading. This is really more like a pre-authentication step.&lt;&#x2F;p&gt;
&lt;p&gt;Radius servers can also proxy requests to other servers to do the actual authentication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;network-access-server&quot;&gt;Network Access Server&lt;&#x2F;h2&gt;
&lt;p&gt;The NAS acts as the gateway between the user and the wider network.&lt;&#x2F;p&gt;
&lt;p&gt;The NAS will send the users request to access the network to the Radius server. The server will try to authenticate user give the information in the request. After that, the radius server will instruct the NAS whether to allow access to the user and how much.&lt;&#x2F;p&gt;
&lt;p&gt;The NAS acts as the gateway router and firewall for that user.&lt;&#x2F;p&gt;
&lt;p&gt;This means that the server simply returns a decision to the NAS, but it’s up to the NAS to enforce it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;There is nothing the radius server can do to make the NAS behave as intended.&lt;&#x2F;strong&gt;	&lt;&#x2F;p&gt;
&lt;p&gt;The radius server receives a request and decides what to do with it. Its decision is based on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;what authentication types you have enabled in the server&lt;&#x2F;li&gt;
&lt;li&gt;what the server can look up in a DB&lt;&#x2F;li&gt;
&lt;li&gt;what’s in the request&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The server cannot request additional information from the NAS, so it has to decided what to do with the information it has. It figures out what to with via policies. A policy can be something like “accept anyone with a correct username&#x2F;password combo.” Or more complicated like: “allow basic users to request premium services in non-premium hours, except for Sundays and holidays, so long as their payment status is up to date”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radius-dictionaries&quot;&gt;Radius Dictionaries&lt;&#x2F;h2&gt;
&lt;p&gt;Radius is a binary-based protocol, not a text-based one. so when we are talking about attributes in the request, like &lt;code&gt;User-Name&lt;&#x2F;code&gt; they are actually encoded in the message as binary data. Dictionary files are used to map between the names used by people and the binary data in the RADIUS packets.&lt;&#x2F;p&gt;
&lt;p&gt;Packets sent to&#x2F;from a NAS contain: a number, length, and binary data.&lt;&#x2F;p&gt;
&lt;p&gt;A dictionary file is a list of entries, each of which contain: a name, a number, and a data type.&lt;&#x2F;p&gt;
&lt;p&gt;The server uses the dictionary like this: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;it searches the dictionaries to match the number in the packet &lt;&#x2F;li&gt;
&lt;li&gt;the corresponding data type is used by the server to interpret the data type &lt;&#x2F;li&gt;
&lt;li&gt;and the name is used in all the debug&#x2F;logging messages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that the NAS and server may use different dictionaries, which may cause problems.&lt;&#x2F;p&gt;
&lt;p&gt;Also note that servers require access to a vendor dictionary to understand vendor attributes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radiusd-conf&quot;&gt;&lt;code&gt;radiusd.conf&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;radiusd.conf&lt;&#x2F;code&gt; file contains the server configuration.&lt;&#x2F;p&gt;
&lt;p&gt;The &amp;quot;unlang&amp;quot; policy language can be used to create complex &lt;code&gt;if &#x2F; else&lt;&#x2F;code&gt; policies. &lt;&#x2F;p&gt;
&lt;p&gt;The client configuration is defined in &lt;code&gt;clients.conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuration-file-syntax&quot;&gt;Configuration File Syntax&lt;&#x2F;h2&gt;
&lt;p&gt;Configuration files are UTF-8 text.&lt;&#x2F;p&gt;
&lt;p&gt;They are line-orientated, meaning everything has to be on a separate line.&lt;&#x2F;p&gt;
&lt;p&gt;A configuration item is an internal variable that has a name and holds a value.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;variable = value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Variables have data types. The can be IP addresses, strings, number, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Portions of the configuration can be grouped in sections:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;texas {
&lt;&#x2F;span&gt;&lt;span&gt;  dallas = yes
&lt;&#x2F;span&gt;&lt;span&gt;  houston = no
&lt;&#x2F;span&gt;&lt;span&gt;  san_antonio = 70
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A configuration file can load another configuration file via the &lt;code&gt;$INCLUDE&lt;&#x2F;code&gt; statement:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$INCLUDE other.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or a directories. Note that dotfiles &lt;code&gt;.imadotfile.conf&lt;&#x2F;code&gt; are ignored but editor “backup” files with tildes &lt;code&gt;~backup.conf&lt;&#x2F;code&gt; are not. Also this is how you reuse variable definitions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;somedir = &amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;$INCLUDE ${somedir}&#x2F;foo&#x2F;bar&#x2F;baz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Variable references &lt;code&gt;${var_name}&lt;&#x2F;code&gt; act as macros, and expand when the server loads.&lt;&#x2F;p&gt;
&lt;p&gt;This is different from run-time expansion, which is done like this: &lt;code&gt;%{...}&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can also use environment variables:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ENV{variable}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here’s weird one for fun: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;${reference1[name].reference2}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sections can have instance names:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;section-type instance-name {
&lt;&#x2F;span&gt;&lt;span&gt;    [ statements ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, the &lt;code&gt;client&lt;&#x2F;code&gt; section is used to define information about a client. When multiple clients are defined, they are distinguished by their &lt;code&gt;instance-name&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;booleans-are-weird-in-radius&quot;&gt;Booleans are weird in radius.&lt;&#x2F;h3&gt;
&lt;p&gt;The boolean data type contains a true or false value. The values &lt;code&gt;yes&lt;&#x2F;code&gt;, &lt;code&gt;on&lt;&#x2F;code&gt;, and &lt;code&gt;1&lt;&#x2F;code&gt; evaluate to &lt;em&gt;true.&lt;&#x2F;em&gt; The values &lt;code&gt;no&lt;&#x2F;code&gt;, &lt;code&gt;off&lt;&#x2F;code&gt;, and &lt;code&gt;0&lt;&#x2F;code&gt; evaluate to &lt;em&gt;false&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;var = yes 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;delay-is-a-data-type&quot;&gt;Delay is a data type&lt;&#x2F;h3&gt;
&lt;p&gt;Delay is a data type. It contains fractional numbers, like &lt;code&gt;1.4&lt;&#x2F;code&gt;. These numbers are base 10. Usually they are used for timers. The resolution of delay is no more than microseconds, but usually in milliseconds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;words&quot;&gt;Words&lt;&#x2F;h3&gt;
&lt;p&gt;A &lt;em&gt;word&lt;&#x2F;em&gt; string is composed of one word, without any surrounding quotes, such as &lt;code&gt;iamaword123&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strings&quot;&gt;Strings&lt;&#x2F;h3&gt;
&lt;p&gt;Strings can have single or double quotes, or back-ticks.&lt;&#x2F;p&gt;
&lt;p&gt;The main difference between the single and double quoted strings is that the double quoted strings can be dynamically expanded.&lt;&#x2F;p&gt;
&lt;p&gt;The syntax &lt;code&gt;${…}&lt;&#x2F;code&gt;  is used for parse-time expansion and &lt;code&gt;%{…}&lt;&#x2F;code&gt; is used for run-time expansion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;some-variables&quot;&gt;Some Variables&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;keyword&lt;&#x2F;th&gt;&lt;th&gt;meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;checkrad&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Checkrad is used by the radius server to check if its idea of a user logged in on a certain port&#x2F;NAS is correct if a double login is detected.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cleanup_delay&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;The time to wait (in seconds) before “cleaning up” a reply that was sent to the NAS.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;hostname_lookups&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Default is no, enabled it mean DNS requests which may take super long and block other requests.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;libdir&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;The libdir is where to find the &lt;code&gt;rlm_*&lt;&#x2F;code&gt; modules.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;max_request_time&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Maximum seconds to handle a request.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;max_requests&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;The maximum number of requests of which the server keeps track of.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;panic_action&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;What to do when panic. Its a string.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pidfile&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Where to store the PID of the server. To make killing it easier.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;cleanup-delay&quot;&gt;&lt;code&gt;cleanup_delay&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The request and replay are usually cached intenally for a short period of time after the reply is sent to the NAS. If the packets gets lost or something, the NAS might send a re-send the request. If too low, then it’s useless. If it’s too high, then the server will cache too many requests and some new requests may get blocked (see &lt;code&gt;max_requests&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;security-configuration&quot;&gt;Security Configuration&lt;&#x2F;h1&gt;
&lt;p&gt;These directives go into a security section, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;security {
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I left out a lot but here are some interesting ones:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;reject_delay&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Seconds to wait before sending an &lt;code&gt;Access-Reject&lt;&#x2F;code&gt;. Slows down DDoS attack and slows down brute force password cracking.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;status_server&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Boolean. Whether to respond to Status-Server requests. See also: &lt;code&gt;raddb&#x2F;sites-available&#x2F;status&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;thread-pool&quot;&gt;Thread pool&lt;&#x2F;h2&gt;
&lt;p&gt;The thread pool is a long-lived group of threads that take turns (round-robin) handling any incoming requests.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;max-requests-per-server&quot;&gt;&lt;strong&gt;&lt;code&gt;max_requests_per_server&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Default is 0.&lt;&#x2F;p&gt;
&lt;p&gt;The documentation says: There may be memory leaks or resource allocation problems with the server. If so, set this value to approximately 300 so that the resources will be cleaned up periodically. Not sure what the tradeoff is... do the request after 300 get dropped?&lt;&#x2F;p&gt;
&lt;p&gt;Also: &#x27;0&#x27; is a special value meaning &#x27;&lt;em&gt;infinity&lt;&#x2F;em&gt;&#x27; or &#x27;&lt;em&gt;the servers never exit&lt;&#x2F;em&gt;&#x27;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;virtual-servers&quot;&gt;Virtual Servers&lt;&#x2F;h1&gt;
&lt;p&gt;A virtual server is a (nearly complete) RADIUS server.&lt;&#x2F;p&gt;
&lt;p&gt;FreeRADIUS can run multiple virtual servers at the same time. &lt;&#x2F;p&gt;
&lt;p&gt;Virtual servers can even proxy requests to each other.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest way to define a virtual server would be to take all of the request processing sections from &lt;code&gt;radius.conf&lt;&#x2F;code&gt; (&lt;code&gt;authorize&lt;&#x2F;code&gt; , &lt;code&gt;authenticate&lt;&#x2F;code&gt;, etc.) and wrap them in a &lt;code&gt;server {}&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;server foo {
&lt;&#x2F;span&gt;&lt;span&gt;		listen {
&lt;&#x2F;span&gt;&lt;span&gt;			ipaddr = 127.0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;			port = 2000
&lt;&#x2F;span&gt;&lt;span&gt;			type = auth
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		authorize {
&lt;&#x2F;span&gt;&lt;span&gt;			update control {
&lt;&#x2F;span&gt;&lt;span&gt;				Cleartext-Password := &amp;quot;bob&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;			pap
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		authenticate {
&lt;&#x2F;span&gt;&lt;span&gt;			pap
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only certain sub-sections can appear in a virtual server section:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listen&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;client&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;authorize&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;authenticate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;port-auth&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pre-proxy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;post-proxy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;preacct&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;accounting&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;session&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When a &lt;code&gt;listen&lt;&#x2F;code&gt; section is inside of a virtual server definition, it means that all requests sent to that IP&#x2F;port will be processed through the virtual server. There can not be two &lt;code&gt;listen&lt;&#x2F;code&gt; sections with the same IP address and port number.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;authorization-section&quot;&gt;Authorization Section&lt;&#x2F;h3&gt;
&lt;p&gt;The name of this section is authorize for historical reasons, as earlier versions of the server did not have a &lt;code&gt;post-auth section&lt;&#x2F;code&gt;. A more accurate description of this section would be &lt;code&gt;pre-authentication&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The authorize section processes &lt;code&gt;Access-Request&lt;&#x2F;code&gt; packets by normalizing the request, determining
which authentication method to use, and either setting the “known good” password (the valid password found in the database) for the user or informing the server that the request should be proxied.&lt;&#x2F;p&gt;
&lt;p&gt;Once the authorize section has finished processing the packet, the return code for the section is examined by the server. If the return code is &lt;code&gt;noop&lt;&#x2F;code&gt;, &lt;code&gt;notfound&lt;&#x2F;code&gt;, &lt;code&gt;ok&lt;&#x2F;code&gt;, or &lt;code&gt;updated&lt;&#x2F;code&gt;, then request processing continues.&lt;&#x2F;p&gt;
&lt;p&gt;If the return code is &lt;code&gt;handled&lt;&#x2F;code&gt;, then it is presumed that one of the modules set the contents of the reply, and the server sends the reply message. &lt;&#x2F;p&gt;
&lt;p&gt;Otherwise, the server treats the authentication as being rejected and runs the &lt;code&gt;post-auth&lt;&#x2F;code&gt; section.&lt;&#x2F;p&gt;
&lt;p&gt;If the authentication has not been rejected, then the server continues processing the request by
searching for the &lt;code&gt;Auth-Type&lt;&#x2F;code&gt; attribute. Then the named sub-section of &lt;code&gt;authenticate&lt;&#x2F;code&gt; is executed. &lt;&#x2F;p&gt;
&lt;p&gt;The authorization section is starts when the server receives an &lt;code&gt;Access-Request&lt;&#x2F;code&gt; packet.&lt;&#x2F;p&gt;
&lt;p&gt;First preprocesses (&lt;code&gt;hints&lt;&#x2F;code&gt; and &lt;code&gt;huntgroups&lt;&#x2F;code&gt;), then does &lt;code&gt;realms&lt;&#x2F;code&gt;, then finally the &lt;code&gt;users&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;The order of the realm modules will determine the order in which a matching realm is found. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;authorize {
&lt;&#x2F;span&gt;&lt;span&gt;  filter-username
&lt;&#x2F;span&gt;&lt;span&gt;  preprocess
&lt;&#x2F;span&gt;&lt;span&gt;  # operator-name
&lt;&#x2F;span&gt;&lt;span&gt;  # cui
&lt;&#x2F;span&gt;&lt;span&gt;  # authlog
&lt;&#x2F;span&gt;&lt;span&gt;  chap
&lt;&#x2F;span&gt;&lt;span&gt;  mschap
&lt;&#x2F;span&gt;&lt;span&gt;	digest
&lt;&#x2F;span&gt;&lt;span&gt;	# mimax
&lt;&#x2F;span&gt;&lt;span&gt;	# IPASS
&lt;&#x2F;span&gt;&lt;span&gt;	suffix 
&lt;&#x2F;span&gt;&lt;span&gt;  ntdomain
&lt;&#x2F;span&gt;&lt;span&gt;  eap {
&lt;&#x2F;span&gt;&lt;span&gt;		ok = return
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  # unix
&lt;&#x2F;span&gt;&lt;span&gt;  files
&lt;&#x2F;span&gt;&lt;span&gt;  -sql
&lt;&#x2F;span&gt;&lt;span&gt;  # smbpasswd
&lt;&#x2F;span&gt;&lt;span&gt;  -ldap
&lt;&#x2F;span&gt;&lt;span&gt;  # daily
&lt;&#x2F;span&gt;&lt;span&gt;	expiration
&lt;&#x2F;span&gt;&lt;span&gt;	logintime
&lt;&#x2F;span&gt;&lt;span&gt;	pap
&lt;&#x2F;span&gt;&lt;span&gt;	Autz-Type Status-Server {
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;filter-username&lt;&#x2F;code&gt; this is a policy that sanitizing usernames in requests by removing garbage like spaces and invalid characters. If it appears invalid, the request is rejected. &lt;&#x2F;p&gt;
&lt;p&gt;See &lt;code&gt;policy.d&#x2F;filter&lt;&#x2F;code&gt; for the definition of the &lt;code&gt;filter-username&lt;&#x2F;code&gt; policy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;preprocess&lt;&#x2F;code&gt; sanitizes the non-standard format attributes in the request and makes them standard.&lt;&#x2F;p&gt;
&lt;p&gt;(I think that this mean like how a mac address can be written in like 6953 different ways)&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;CUI&lt;&#x2F;code&gt; is used then &lt;code&gt;Operator-Name&lt;&#x2F;code&gt; is required to be set for CUI generation.&lt;&#x2F;p&gt;
&lt;p&gt;Not sure what this means or why it is true.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;auth_log&lt;&#x2F;code&gt; generates a log of authentication requests.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;chap&lt;&#x2F;code&gt; sets &lt;code&gt;Auth-Type := CHAP&lt;&#x2F;code&gt; for requests which contain a &lt;code&gt;CHAP-Password&lt;&#x2F;code&gt; attribute.&lt;&#x2F;p&gt;
&lt;p&gt;When users log in with an &lt;code&gt;MS-CHAP-Challenge&lt;&#x2F;code&gt; attribute for authentication, the &lt;code&gt;mschap&lt;&#x2F;code&gt; module finds the &lt;code&gt;MS-CHAP-Challenge attribute&lt;&#x2F;code&gt; and adds &lt;code&gt;Auth-Type := MS-CHAP&lt;&#x2F;code&gt; to the request, which causes the server to then use the &lt;code&gt;mschap&lt;&#x2F;code&gt; module for authentication.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;digest&lt;&#x2F;code&gt;is for SIP (session initiation protocol) servers. (VoIP). who cares.&lt;&#x2F;p&gt;
&lt;p&gt;WiMAX refers to implementations of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IEEE_802.16&quot;&gt;IEEE 802.16&lt;&#x2F;a&gt; family of wireless-networks standards created by the WiMAX Forum. The WiMAX specification states that the &lt;code&gt;Calling-Station-Id&lt;&#x2F;code&gt; is 6 octets of the MAC.&lt;&#x2F;p&gt;
&lt;p&gt;This definition conflicts with with all common RADIUS practices. Uncommenting the &lt;code&gt;wimax&lt;&#x2F;code&gt; module here means that it will fix the &lt;code&gt;Calling-Station-Id&lt;&#x2F;code&gt; attribute to the normal format. whatever.&lt;&#x2F;p&gt;
&lt;p&gt;💡 &lt;em&gt;&lt;strong&gt;Did you know&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;: WiMAX was sometimes referred to as &amp;quot;Wi-Fi on steroids&amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;WiMAX#cite_note-5&quot;&gt;[5]&lt;&#x2F;a&gt; lol&lt;&#x2F;p&gt;
&lt;p&gt;Looks for &lt;code&gt;IPASS&lt;&#x2F;code&gt;-style &lt;code&gt;realm&#x2F;&lt;&#x2F;code&gt; and, if not found, looks for &lt;code&gt;@realm&lt;&#x2F;code&gt; and decides whether or not to proxy based on those results.&lt;&#x2F;p&gt;
&lt;p&gt;When using multiple kinds of realms, set &lt;code&gt;ignore_null = yes&lt;&#x2F;code&gt; for all of them. Otherwise, if the first style of realm doesn’t match, then the other styles won’t be checked.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;eap&lt;&#x2F;code&gt; module takes care of &lt;code&gt;EAP-MD5&lt;&#x2F;code&gt;, &lt;code&gt;EAP-TLS&lt;&#x2F;code&gt;, and &lt;code&gt;EAP-LEAP&lt;&#x2F;code&gt; authentication.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;unix&lt;&#x2F;code&gt; pulls crypt’d passwords from &lt;code&gt;&#x2F;etc&#x2F;passwd&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;etc&#x2F;shadow&lt;&#x2F;code&gt; using the system APIs to get the password.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;files&lt;&#x2F;code&gt; reads the &lt;code&gt;radbb&#x2F;users&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;-sql&lt;&#x2F;code&gt;  module looks in an SQL database. I don’t know why it gets a dash, but &lt;code&gt;-ldap&lt;&#x2F;code&gt; gets one too, so maybe its a theme.&lt;&#x2F;p&gt;
&lt;p&gt;... skipping a couple idc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;daily&lt;&#x2F;code&gt; enforces daily limits on time spent logged in. I think it requires &lt;code&gt;expiration&lt;&#x2F;code&gt; and &lt;code&gt;logintime&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If no other module has claimed responsibility for authentication, then try &lt;code&gt;pap&lt;&#x2F;code&gt;. This process allows the other modules listed above to only add a &amp;quot;known good&amp;quot; password to the request and nothing else. The PAP module will then see that password and use it to do PAP authentication. This module should be listed last so that the other modules get a chance to set &lt;code&gt;Auth-Type&lt;&#x2F;code&gt; for themselves.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;status_server = yes&lt;&#x2F;code&gt;, then &lt;code&gt;Status-Server&lt;&#x2F;code&gt; messages are passed through the following section and &lt;strong&gt;only&lt;&#x2F;strong&gt; the following section.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;Autz-Type Status-Server {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;authentication-section&quot;&gt;Authentication Section&lt;&#x2F;h3&gt;
&lt;p&gt;This section lists those modules that are available for authentication. &lt;&#x2F;p&gt;
&lt;p&gt;Note that the order of modules listed below does &lt;strong&gt;not&lt;&#x2F;strong&gt; mean “try each module in order”. &lt;&#x2F;p&gt;
&lt;p&gt;Instead, a module from the &lt;code&gt;authorize&lt;&#x2F;code&gt; section adds a configuration attribute &lt;code&gt;Auth-Type := FOO&lt;&#x2F;code&gt;. That authentication type is then used to pick the appropriate module from the list below.&lt;&#x2F;p&gt;
&lt;p&gt;The authenticate section is only used when the server is authenticating requests locally and is
bypassed completely when proxying.&lt;&#x2F;p&gt;
&lt;p&gt;This section is different from each of the other sections: it is composed of a series of subsections, only one of which is executed.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Auth-Type&lt;&#x2F;code&gt; attribute can also refer to a module (e.g. &lt;code&gt;eap&lt;&#x2F;code&gt;) instead of a subsection, in which case that module, and only that module, is processed.&lt;&#x2F;p&gt;
&lt;p&gt;A simple example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;authenticate {
&lt;&#x2F;span&gt;&lt;span&gt;	Auth-Type PAP {
&lt;&#x2F;span&gt;&lt;span&gt;		pap
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	Auth-Type MS-CHAP {
&lt;&#x2F;span&gt;&lt;span&gt;		mschap
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	Auth-Type CHAP {
&lt;&#x2F;span&gt;&lt;span&gt;		chap
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	eap
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In general, the &lt;code&gt;Auth-Type&lt;&#x2F;code&gt; attribute &lt;strong&gt;should not&lt;&#x2F;strong&gt; be set. The server will figure it out on its own and will do the right thing. The above is just defining &lt;code&gt;Auth-Types&lt;&#x2F;code&gt; but not actually setting the attribute.&lt;&#x2F;p&gt;
&lt;p&gt;Do not put &lt;code&gt;unlang&lt;&#x2F;code&gt; configurations into the &lt;code&gt;authenticate&lt;&#x2F;code&gt; section. Put them in the &lt;code&gt;post-auth&lt;&#x2F;code&gt; section instead. That’s what the &lt;code&gt;post-auth&lt;&#x2F;code&gt; section is for.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pre-accounting-section&quot;&gt;Pre-accounting Section&lt;&#x2F;h3&gt;
&lt;p&gt;This section decides which accounting type to use.&lt;&#x2F;p&gt;
&lt;p&gt;Session start times are &lt;strong&gt;implied&lt;&#x2F;strong&gt; in RADIUS. The NAS never sends a &amp;quot;start time&amp;quot;. Instead, it sends a start packet, &lt;strong&gt;possibly&lt;&#x2F;strong&gt; with an Acct-Delay-Time.&lt;&#x2F;p&gt;
&lt;p&gt;You can create a start time with the following code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;update request {
&lt;&#x2F;span&gt;&lt;span&gt;	FreeRADIUS-Acct-Session-Start-Time = &amp;quot;%{expr: %l - %\{%{Acct-Session-Time}:-0} - %\{%{Acct-Delay-Time}:-0}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;acct_unique&lt;&#x2F;code&gt; ensures that a semi-unique identifier is available for every request because many NAS boxes are broken.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;files&lt;&#x2F;code&gt;  module reads the &lt;code&gt;acct_user&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;accounting-section&quot;&gt;Accounting Section&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;accounting&lt;&#x2F;code&gt; section Iogs the accounting data.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cui&lt;&#x2F;code&gt; updates accounting packets by adding the &lt;code&gt;CUI&lt;&#x2F;code&gt; attribute from the corresponding &lt;code&gt;Access-Accept&lt;&#x2F;code&gt;. It&#x27;s used for when the NAS doesn’t support CUI themselves.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;detail&lt;&#x2F;code&gt; creates a &lt;code&gt;detail&lt;&#x2F;code&gt;&#x27;ed log of the packets.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;-sql&lt;&#x2F;code&gt; logs traffic into a SQL db.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;exec&lt;&#x2F;code&gt; is for &lt;code&gt;Exec-Program&lt;&#x2F;code&gt; and &lt;code&gt;Exec-Program-Wait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;post-authentication-section&quot;&gt;Post-authentication Section&lt;&#x2F;h3&gt;
&lt;p&gt;Once it is &lt;strong&gt;verified&lt;&#x2F;strong&gt; that the user has been authenticated, there are additional steps that can be taken.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pre-proxy-section&quot;&gt;Pre-proxy Section&lt;&#x2F;h3&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
&lt;h3 id=&quot;post-proxy-section&quot;&gt;Post-proxy Section&lt;&#x2F;h3&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-an-inner-tunnel&quot;&gt;What is an inner-tunnel&lt;&#x2F;h1&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-an-idp&quot;&gt;What is an IdP&lt;&#x2F;h1&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>AWS Technical Essentials Course Notes</title>
		<published>2022-05-23T00:00:00+00:00</published>
		<updated>2022-05-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/05-aws-basics/" type="text/html"/>
		<id>https://jxlxx.org/posts/05-aws-basics/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;explore.skillbuilder.aws&#x2F;learn&#x2F;course&#x2F;external&#x2F;view&#x2F;elearning&#x2F;1851&#x2F;aws-technical-essentials?dt=tile&amp;amp;tile=fdt&quot;&gt;Link to the course (it&#x27;s free btw)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;module-1-introduction-to-amazon-web-services&quot;&gt;&lt;strong&gt;Module 1: Introduction to Amazon Web Services&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;overview-of-aws-infrastructure&quot;&gt;Overview of AWS infrastructure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;AWS resources are in Availability Zones&lt;&#x2F;li&gt;
&lt;li&gt;Availability Zones are in Regions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;us-east-2&lt;&#x2F;code&gt; is a region&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;us-east-2a&lt;&#x2F;code&gt; is an availability zone&lt;&#x2F;li&gt;
&lt;li&gt;Services are deployed at either a Global, Region, or AZ level&lt;&#x2F;li&gt;
&lt;li&gt;Some service require you choose an AZ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;iam&quot;&gt;IAM&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;When you create an account with email and password that’s called a &lt;strong&gt;root user&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Email&#x2F;password combo is one set of credentials but you get another set of credentials called &lt;strong&gt;access keys&lt;&#x2F;strong&gt;, they allow you to use CLI or AWS SDKs&lt;&#x2F;li&gt;
&lt;li&gt;Access keys have two parts: &lt;strong&gt;access key ID&lt;&#x2F;strong&gt; and &lt;strong&gt;secret access key&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;IAM is global and not specific to regions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Every AWS resource must live inside of a network&lt;&#x2F;li&gt;
&lt;li&gt;AWS provides a default VPC, virtual private network&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;module-2-aws-compute&quot;&gt;&lt;strong&gt;Module 2: AWS Compute&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;AMI: Amazon Machine Image&lt;&#x2F;p&gt;
&lt;p&gt;When selecting an instance type and size, you see: &lt;code&gt;t3.medium&lt;&#x2F;code&gt; or &lt;code&gt;a1.large&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t3&lt;&#x2F;code&gt; and &lt;code&gt;a1&lt;&#x2F;code&gt; is the instance family&#x2F;type + generation, determines the hardware capabilities&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;medium&lt;&#x2F;code&gt; and &lt;code&gt;large&lt;&#x2F;code&gt; is the instance size (vCPUS, memory, etc)&lt;&#x2F;li&gt;
&lt;li&gt;you only get charged while in the running state, of in the stopping (preparing to hibernate)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webapp.serverlessworkshops.io&#x2F;&quot;&gt;Wild Rydes Web Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;d1.awsstatic.com&#x2F;whitepapers&#x2F;architecture&#x2F;AWS-Serverless-Applications-Lens.pdf&quot;&gt;AWS Serverless Whitepaper&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;module-3-aws-networking&quot;&gt;&lt;strong&gt;Module 3: AWS Networking&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;In AWS, the smallest IP range you can have is &#x2F;28, which provides 16 IP addresses. The largest IP range you can have is a &#x2F;16, which provides 65,536 IP addresses.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To create a VPC, we need to set 2 things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;region&lt;&#x2F;li&gt;
&lt;li&gt;IP range&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;VPC are split into subnets, and then you put your AWS resources into these subnets.&lt;&#x2F;p&gt;
&lt;p&gt;To provide more control over access of resources.&lt;&#x2F;p&gt;
&lt;p&gt;To create a Subnet, we need 3 things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the VPC it will live in&lt;&#x2F;li&gt;
&lt;li&gt;the AZ it will live in&lt;&#x2F;li&gt;
&lt;li&gt;IP range (subset of the VPC)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;VPCs need Internet Gateways (IGW) to connect to the internet.&lt;&#x2F;p&gt;
&lt;p&gt;If you only want traffic from a specific place, for example an on-premises datacenter, then you can create Virtual Private Gateway (VGW).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;AWS reserves 5 IP addresses in each subnet.&lt;&#x2F;strong&gt; &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;10.0.0.0: Network address.
= 10.0.0.1: Reserved for the VPC router.&lt;&#x2F;li&gt;
&lt;li&gt;10.0.0.2: The IP address of the DNS server is the base of the VPC network range plus two. &lt;&#x2F;li&gt;
&lt;li&gt;10.0.0.3: Reserved for future use. (?)&lt;&#x2F;li&gt;
&lt;li&gt;10.0.0.255: Network broadcast address. AWS does not support broadcast in a VPC, so they reserve this address.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;How does traffic get routed through the VPC?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you create a VPC, AWS creates a route table called the &lt;strong&gt;main route table&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A route table contains a set of rules, called routes, that are used to determine where traffic is directed.&lt;&#x2F;p&gt;
&lt;p&gt;Default configuration allows traffic between all the subnets in the local network.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Network Access Control List (Network ACL)&lt;&#x2F;strong&gt; can be thought of as a firewall at the subnet level. &lt;&#x2F;p&gt;
&lt;p&gt;You can use it to only allow HTTPS traffic in and out of your subnet. Remember if you make a rule to only allow HTTPS traffic in, you have to also make a rule to allow HTTPS traffic out.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;NAT Gateway&lt;&#x2F;strong&gt; provides internet connectivity to instances and private subnets. A NAT gateway is a &lt;strong&gt;Network Address Translation&lt;&#x2F;strong&gt; service. You can use a NAT gateway to so that instances in a private subnet can connect to services outside your subnet.&lt;&#x2F;p&gt;
&lt;p&gt;The next layer of security is a &lt;strong&gt;Security Group&lt;&#x2F;strong&gt;. This is a firewall at the EC2 level. Security groups are not optional. The default configuration of a new security group blocks all inbound traffic and allows all outbound traffic. This ok and works because security groups will remember if a connection if originally initiated by the EC2 instance or outside and will temporarily allow traffic to respond with modifying the inbound rules.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;module-4-aws-storage&quot;&gt;&lt;strong&gt;Module 4: AWS Storage&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;AWS storage services are grouped into 3 categories: &lt;strong&gt;block storage, file storage, and object storage.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;File storage&lt;&#x2F;strong&gt;: It&#x27;s what it sounds like, it’s a file system. Each file has metadata like file name, file size, created date, etc. And files have paths. File storage is good when 
you require centralized access to file that need to be easily shared and managed by multiple host computers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Block storage&lt;&#x2F;strong&gt;: splits of data into block, considers each block it’s own thing&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;good for things that gets updated a lot because you will only need to update individual blocks not the whole thing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Object storage&lt;&#x2F;strong&gt;: considers each object its own thing.
- WORM: write once, read many&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EBS, elastic block storage&lt;&#x2F;strong&gt;  , is like an external drive. Persistent storage.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;EC2 instance storage in the machines drives, but are not saved when the instance is terminated.&lt;&#x2F;li&gt;
&lt;li&gt;Snapshots are saved from EBS as backups.&lt;&#x2F;li&gt;
&lt;li&gt;Unlike EBS, which requires a EC2 instance to be used, Amazon S3 is a standalone storage solution.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;S3&lt;&#x2F;strong&gt; is object storage. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;S3 objects are stored in a flat structure using unique identifiers for look up.&lt;&#x2F;li&gt;
&lt;li&gt;In S3, you store objects in buckets. This is mandatory.&lt;&#x2F;li&gt;
&lt;li&gt;At minimum, you need to specify 2 details: the region and the bucket name.&lt;&#x2F;li&gt;
&lt;li&gt;Bucket names must be unique across all AWS accounts (like in the world).&lt;&#x2F;li&gt;
&lt;li&gt;Everything in Amazon S3 is private by default (can. only be viewed by the AWS account that created that resource).&lt;&#x2F;li&gt;
&lt;li&gt;Two ways to change&#x2F;have more control over this: IAM policies &amp;amp; S3 bucket policies
&lt;ul&gt;
&lt;li&gt;You can specify in IAM policies what users are allowed to do to buckets&lt;&#x2F;li&gt;
&lt;li&gt;Or, you can specify on the bucket side what’s allowed to happen to that bucket&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Amazon S3 reinforces encryption in transit (as it travels to and from Amazon S3) and at rest&lt;&#x2F;li&gt;
&lt;li&gt;You can use S3 versioning. Default behaviour is that objects get overwritten when they get sent to S3.&lt;&#x2F;li&gt;
&lt;li&gt;There are 6 different S3 storage classes that are optimized for different things.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can automate automatic tier transitions with &lt;strong&gt;object life cycle&lt;&#x2F;strong&gt; management. You can choose:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Transition actions: when objects should transition to another storage class&lt;&#x2F;li&gt;
&lt;li&gt;Expiration actions: when objects expire and should be permanently deleted&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;module-5-databases&quot;&gt;&lt;strong&gt;Module 5: Databases&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;nothing of note&lt;&#x2F;p&gt;
&lt;h1 id=&quot;module-6-monitoring-optimization-and-serverless&quot;&gt;&lt;strong&gt;Module 6: Monitoring, Optimization, and Serverless&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;load balancing: distributing tasks across a set of resources&lt;&#x2F;li&gt;
&lt;li&gt;you can run a load balancer on an EC2 instance or use ELB&lt;&#x2F;li&gt;
&lt;li&gt;ELB makes health checks to services to determine whether it should send traffic their way&lt;&#x2F;li&gt;
&lt;li&gt;ELB is actually really scalable even if it looks like it isn’t&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Application Load Balancer — Layer 7: HTTP&#x2F;HTTPS&lt;&#x2F;p&gt;
&lt;p&gt;Network Load Balancer — Layer 4: TCP&#x2F;UDP&#x2F;TLS&lt;&#x2F;p&gt;
&lt;p&gt;Gateway Load Balancer — Layer 3+4: IP&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The ALB is made up of 3 components: rules, listeners, and target groups
&lt;ul&gt;
&lt;li&gt;target group: the backend servers are defined in one or more target groups. This where traffic is directed. You must define a health check for each target group.&lt;&#x2F;li&gt;
&lt;li&gt;listener: the client connects to the listener. To  define a listener you must provide a port and a protocol. There can be many listener for a single LB. Ex. listen to port 80 for http traffic.&lt;&#x2F;li&gt;
&lt;li&gt;rule: conditions that map clients to target groups&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can have internal or external load balancers. For use within your network or internet facing.&lt;&#x2F;p&gt;
&lt;p&gt;ALB makes routing decisions based on the HTTP protocol, like the URL path (&#x2F;upload) and host, HTTP headers and method, and the source IP address of the client.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ALB uses sticky sessions.&lt;&#x2F;strong&gt; If requests must be sent to the same backend server because the application is stateful, use the sticky session feature. This feature uses an HTTP cookie to remember across connections which server to send the traffic to.&lt;&#x2F;p&gt;
&lt;p&gt;NLBs do not understand what an HTTP request is.&lt;&#x2F;p&gt;
&lt;p&gt;NLBs use a flow hash routing algorithm. The algorithm is based on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;protocol&lt;&#x2F;li&gt;
&lt;li&gt;source ip and port&lt;&#x2F;li&gt;
&lt;li&gt;destination ip and port&lt;&#x2F;li&gt;
&lt;li&gt;TCP sequence number&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If all those params are the same, it goes to the same target&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to Make Alcohol in a Jar 🍻</title>
		<published>2022-05-17T00:00:00+00:00</published>
		<updated>2022-05-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/08-how-to-alcohol/" type="text/html"/>
		<id>https://jxlxx.org/posts/08-how-to-alcohol/</id>
		<content type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h1&gt;
&lt;p&gt;Making cider is really cheap and fun. It&#x27;s also very easy -- I&#x27;m surprised I didn&#x27;t do this as a child. I started doing it in university after discovering craft beer and also discovering how expensive craft beer is. Anyways, it is a fun, easy, rewarding, and &lt;em&gt;financially responsible&lt;&#x2F;em&gt; hobby that more people should get into.	&lt;&#x2F;p&gt;
&lt;p&gt;First of all, cider usually means apple cider. And then people call cider made of pears, &lt;em&gt;perry&lt;&#x2F;em&gt;. And some people say that perry is techically not cider -- it&#x27;s perry. But personally, I don&#x27;t care. I call it all cider. I made have made an alcoholic beverage with just yeast, water, and table sugar -- I still called it cider. Who cares. (and yes, it did not taste good -- that wasn&#x27;t the point)&lt;&#x2F;p&gt;
&lt;p&gt;Anyways. There are four essential things you need to make alcohol:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A vessel&lt;&#x2F;li&gt;
&lt;li&gt;Sugar&lt;&#x2F;li&gt;
&lt;li&gt;Water&lt;&#x2F;li&gt;
&lt;li&gt;Yeast&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;And sometimes 2, 3, and 4 can be found all together in a neat little package in the form of &lt;em&gt;organic juice&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sure, there are other things you can use or add, but these are the only things that are critical.&lt;&#x2F;p&gt;
&lt;p&gt;These four things fall into one of two catagories:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;tools&lt;&#x2F;li&gt;
&lt;li&gt;ingredients&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;A vessel is a tool. Some other tools you might use are: a funnel, a sieve, a hydrometer (to message alcohol content), etc.&lt;&#x2F;p&gt;
&lt;p&gt;As for ingredients, that&#x27;s really up to you as well. I won&#x27;t talk about ingredients in depth until the ingredients section at the end.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-tools-hammer&quot;&gt;The tools 🔨&lt;&#x2F;h1&gt;
&lt;p&gt;Any vessel with a tight seal will work. I have personally made alcohol in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;random shitty jars&lt;&#x2F;li&gt;
&lt;li&gt;high quality mason jars&lt;&#x2F;li&gt;
&lt;li&gt;big plastic single use juice bottles&lt;&#x2F;li&gt;
&lt;li&gt;wine bottles&lt;&#x2F;li&gt;
&lt;li&gt;big weird container things for uncooked spaghetti&lt;&#x2F;li&gt;
&lt;li&gt;glass drink dispenser things &lt;&#x2F;li&gt;
&lt;li&gt;who knows what else&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The purpose of the vessel, other than a glorified bowl, is to make an airtight seal so that bacteria that will turn the cider to vinegar will not get in. Vinegar means no alcohol, which is bad if you are trying to make alcohol.&lt;&#x2F;p&gt;
&lt;p&gt;A great starter vessel is the mason jar. Easy to find. Cheap. And all things considered, does a create job at making a seal. (Maybe too great, see the next section)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-dangers&quot;&gt;The dangers ⚠️&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;You can skip this section if you don&#x27;t care if you live or die.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a moment to discuss the &amp;quot;dangers&amp;quot; of making alcohol this way... If you stick to the things I mention in this list, probably nothing will ever go wrong. The worst thing that could happen is you get a batch of vinegar instead of alcohol -- not the end of the world.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Botulism&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;People&#x27;s first concern is botulism. Botulism is a concern when you are &lt;em&gt;canning&lt;&#x2F;em&gt;, not when you are fermenting. The bacteria that can cause botulism cannot survive in our concoctions.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Explosions&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To be fair, I have had one or two &amp;quot;explosions&amp;quot; (depending on how define explosions). &lt;&#x2F;p&gt;
&lt;p&gt;The first one was a 1.5L wine bottle filled with blackberry purée. My dumbass roommate (whomst I love) was vigously shaking the bottle to &amp;quot;&lt;em&gt;get all the flavours out&lt;&#x2F;em&gt;&amp;quot; and then said &amp;quot;&lt;em&gt;hmm... I&#x27;m gonna tighten this already sealed bottle even more&lt;&#x2F;em&gt;&amp;quot; and then twisted the cap past its threshold of twisted-ness and I watched in slow motion as this 1.5L bottle somehow became a firehose of blackberry sauce that sprayed across our kitchen, dining room, and living room. I&#x27;ll never forget watching him aim it into the kitchen sink to try to contain the damage, and then see all the juice sprayed back out of the sink somehow covering an even wider surface area. It took us 6 hours to clean up and we had a purple ceiling for the next 6 months (bleach got the stain out). Any so that&#x27;s something to consider if you are using something with a high volume to exit area ration type of vessel.&lt;&#x2F;p&gt;
&lt;p&gt;The second was much more dangerous. But also a special case. And it was also my roommates fault.&lt;&#x2F;p&gt;
&lt;p&gt;We had started making cider in large batches, 10L+, in a large food grade bucket. At the end of one of the fermentation cycles we had the bright idea to save the yeast colony of the batch for the next round,  in hopes that it would give us a more consistent flavour and shorter ferment time (not a bad idea honestly). The yeast was a thick, bright orange sludge, which we put in a mason jar. We then put the mason jar in our special minifridge which we exclusively use for our homebrew. This would have probably been fine... except before we put the jar in the fridge my roommate said, &amp;quot;&lt;em&gt;Hey, I&#x27;m gonna dump a cup of sugar in with the yeast -- so it doesn&#x27;t get hungry.&lt;&#x2F;em&gt;&amp;quot; This turn the yeast jar into a glass bomb. Then the next day we went away for a week for winter break. While we were gone the thing exploded. Luckily no one was hurt and most of the mess and glass was contained in the minifridge. &lt;&#x2F;p&gt;
&lt;p&gt;Anyways... yeah... don&#x27;t do that. If you are using glassware that could be potentially sealed so tightly that the only way to release pressure is for it to explode -- don&#x27;t add so much yeast and sugar. I was never concerned with regular amounts of sugar and yeast, even in tightly sealed mason jars. By regular amounts, I mean something that it intended to be drinkable. When you open&#x2F;burp them, you can feel the pressure and it certainly doesn&#x27;t feel glass explosion worthy. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;level-one-mason-jars-baby-skin-tone-3&quot;&gt;Level One : Mason Jars 👶🏼&lt;&#x2F;h1&gt;
&lt;p&gt;Like I said before, mason jars are a pretty decent starter option if you want to keep costs low and you don&#x27;t want a ton of equipment flying around. I typically buy those pasta sauces that come in mason jars (although they tend to be a bit small) and use those. It&#x27;s also really fun to experiment with mason jars because you can have a bunch of ciders going at once and they are easy to maintain.&lt;&#x2F;p&gt;
&lt;p&gt;A 1L mason is ideal, but you can go smaller (are there larger ones 🤔).&lt;&#x2F;p&gt;
&lt;p&gt;Typically the process is like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Thoroughly clean the mason jar.&lt;&#x2F;li&gt;
&lt;li&gt;Add ingredients &amp;amp; seal.&lt;&#x2F;li&gt;
&lt;li&gt;Put the jar in a dark place and wait. &lt;&#x2F;li&gt;
&lt;li&gt;Check on it occasionally. Burp to relieve pressure. Taste test.&lt;&#x2F;li&gt;
&lt;li&gt;Done. (drink or put in the fridge)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;How often you wait and check depends on your ingredients and your climate. Sometimes, yeast will thrive and you will quickly get your desired alcohol level. Sometimes it will go slowly. Sometimes it will get &amp;quot;stuck&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;You will be able to gauge the activity level based on bubbles&#x2F;movement in the jar. There&#x27;s nothing better than seeing those first bubz 🥲.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;level-two-bucket-airlock-secondary-vessels-construction-worker-skin-tone-4&quot;&gt;Level Two : Bucket + Airlock + Secondary Vessels 👷🏽‍♀️&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;bucket&quot;&gt;Bucket&lt;&#x2F;h2&gt;
&lt;p&gt;Once you find a recipe you like, the first thing you probably want to do is make more of it.
So the best thing to do would be getting a big plastic bucket. 
These buckets look just like those ten gallon paint buckets, but it should be &lt;em&gt;food grade&lt;&#x2F;em&gt; if you want to use it for cider.
And I hate to say it but you should probably buy new, plastic is porous (I hate to say it because my equipment was bought used 😳).&lt;&#x2F;p&gt;
&lt;p&gt;In addition to a bucket, you will need an &lt;strong&gt;airlock&lt;&#x2F;strong&gt; (to be discussed in the next section). Also, if you are buying from a homebrew shop the bucket will probably have a hole in the lid for the airlock but otherwise you will have to make it yourself.&lt;&#x2F;p&gt;
&lt;p&gt;You will also need some tubes to siphon the cider out of the bucket. You could also get a pump to make it more hygenic to siphon or you can just suck on the tube. To each their own. You will need a rigid tube the length of the bucket (ideally that fits in the airlock hole) and a long soft tube that&#x27;s at least a meter&#x2F;3&#x27;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;air-lock&quot;&gt;Air Lock&lt;&#x2F;h2&gt;
&lt;p&gt;Now if you are using a big bucket to make alcohol, you do NOT want to be worrying about pressure. 
So you definetely will need an airlock. An airlock will allow air to leave the vessel but not enter it. This means that pressure won&#x27;t build up and you won&#x27;t have to burp it or worry about an explosion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;secondary-vessels&quot;&gt;Secondary vessels&lt;&#x2F;h2&gt;
&lt;p&gt;In Level One, you ferment in a jar and when your creating is ready you either drink it straight from the jar (I mean who hasn&#x27;t), pour into a glass and drink, or put the whole thing in the fridge to drink later. &lt;&#x2F;p&gt;
&lt;p&gt;You may come to find that this system is actually pretty inconvient. For example, when you are showing off your beverages, some people can be pretty offput by the jar situation. Most critically though, if you are saving your drink for later, you may find that the flavour changes as time goes on. This is because even though it is in the fridge, the fermentation process hasn&#x27;t stopped, it&#x27;s only slowed down. &lt;&#x2F;p&gt;
&lt;p&gt;Also, if you have upgraded to an airlock situation, we will find that you drink will not be carbonated. Which is very sad. Carbonation happens because while the yeast is creting alcohol, it is also creating CO2. If it&#x27;s in a sealed vessel, that CO2 will cause the cider to carbonate. If there is an airlock, it will just leave the vessel. &lt;&#x2F;p&gt;
&lt;p&gt;So to combat all these issues, we split up fermentation into two processes. The first fermentation happens in your airlocked vessel. Once you have your desired ABV and flavour, you transfer your cider to jars or bottles or something -- without an airlock -- and seal them. You have to do your best to not include the thick yeast sludge into the second ferment, but some will make in anyways. This will be enough to carbonate and continue the fermentation a bit longer.&lt;&#x2F;p&gt;
&lt;p&gt;So the process will be like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Thoroughly clean the bucket.&lt;&#x2F;li&gt;
&lt;li&gt;Add ingredients, close with airlock.&lt;&#x2F;li&gt;
&lt;li&gt;Put the jar in a dark place and wait. &lt;&#x2F;li&gt;
&lt;li&gt;Check on it occasionally. Taste test.&lt;&#x2F;li&gt;
&lt;li&gt;Bottle or jar.&lt;&#x2F;li&gt;
&lt;li&gt;Let sit somewhere dark and warm. &lt;&#x2F;li&gt;
&lt;li&gt;Done. (drink or put in the fridge)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;level-three-measuring-bottling&quot;&gt;Level Three : Measuring + Bottling 🥷&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;measuring-abv-by-gravity&quot;&gt;Measuring ABV by gravity&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;The only thing about this is that if you have whole fruits in the primary fermentation, the numbers might be off. How much I don&#x27;t know! I&#x27;m not a chemist.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ABV&lt;&#x2F;strong&gt; means Alcohol By Volume. A 5% beer means that 5% of the the beer you&#x27;re drinking is pure alcohol (ethanol).&lt;&#x2F;p&gt;
&lt;p&gt;To do this, you need a &lt;strong&gt;test tube&lt;&#x2F;strong&gt; and a &lt;strong&gt;hydrometer&lt;&#x2F;strong&gt;. All you have to do is fill the test tube with cider cider before fermentation and after, and put the hydrometer in there with it. The difference between the starting and finishing number will tell you the ABV.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-bottler&quot;&gt;A bottler&lt;&#x2F;h2&gt;
&lt;p&gt;A bottler is a really nice way to make you cider more appealing to the masses. 
No matter what it tastes like, some people -- many people -- will always judge drinks that come from buckets or jars 😢.&lt;&#x2F;p&gt;
&lt;p&gt;You don&#x27;t have to buy new bottles and caps. You can reuse old ones! Which means you have a good reason to buy a couple cases of Coronas! &lt;em&gt;It will save you money in the long run, okay??&lt;&#x2F;em&gt; It doesn&#x27;t even have to be Corona, I just like them because they are clear bottles (and I like how Coronas taste). All that matter is that they are &lt;strong&gt;not&lt;&#x2F;strong&gt; twist-offs.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-to-do-what-your-fermentation-gets-stuck&quot;&gt;What to do what your fermentation gets &amp;quot;stuck&amp;quot;&lt;&#x2F;h1&gt;
&lt;p&gt;Sometimes -- and this is much more likely if you are using cheap juice -- your fermentation will get &amp;quot;stuck&amp;quot;. It won&#x27;t get alcoholic, it won&#x27;t turn into vinegar... it will just... sit there. It might be dead, it might be taking a nap (yeast can hibernate). In this case, take some of the &lt;em&gt;not-yet-cider&lt;&#x2F;em&gt; cider liquid out, warm it up a bit. Add some more yeast and wait to see if its active (bubbles, foam on top). Then add it back to your vessel. You should also make sure your vessel is in a warm spot overall.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ingredients-pineap&quot;&gt;Ingredients 🍎&lt;&#x2F;h1&gt;
&lt;p&gt;So ingredients-wise, all you really need is: sugar, water, yeast. And you can accomplish this by just adding table sugar, tap water, and bread yeast. It&#x27;s just won&#x27;t taste very good. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;non-alcoholic-cider-vs-juice&quot;&gt;Non-alcoholic cider vs juice&lt;&#x2F;h2&gt;
&lt;p&gt;From southernliving.com:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apple cider is fresh, unfiltered, and often unpasteurized. It&#x27;s also considered a seasonal drink and can be hard to find outside of the autumn months. Apple juice, on the other hand, is filtered and pasteurized, which gives it a longer shelf life, a sweeter taste, and a smoother texture.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Personally, I love using non-alcoholic apple cider to make alcoholic apple cider. It&#x27;s very easy to find in the fall and early winter months (gets really cheap towards the beginning of winter as well). &lt;&#x2F;p&gt;
&lt;h2 id=&quot;organic-vs-not-organic&quot;&gt;Organic vs Not Organic&lt;&#x2F;h2&gt;
&lt;p&gt;If you go the organic route, you typically don’t have to add any yeast. And in my experience, get a higher ABV. 
As a point of reference, in my experience, the cheap&#x2F;fake noname juices peak at about 3.5% and the organic apple cider gets to about %7.	&lt;&#x2F;p&gt;
&lt;p&gt;However if you go non-organic, your ingredients will be way cheaper.
Also, lots of people like non-organic, cheap, fake, sugary juices from concentrate 🤷. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;juice-vs-fruits&quot;&gt;Juice vs Fruits&lt;&#x2F;h2&gt;
&lt;p&gt;You can choose to add chopped&#x2F;blended&#x2F;whole fruits, or fruit juice, or both. &lt;&#x2F;p&gt;
&lt;p&gt;However if you use exclusively whole fruits, you will probably have to add some sugar (table sugar, honey, etc) to the medium (water). &lt;&#x2F;p&gt;
&lt;p&gt;Also, if you use any whole fruits at all, the typical way of measuring ABV -- by measuring the gravity of the medium before and after fermentation -- will no longer be valid. &lt;&#x2F;p&gt;
&lt;p&gt;If you are blending fruits and make the liquid too viscous, it while get gross because you won&#x27;t be able to seperate the yeast from it. So what you can do is strain your blend. Put the juice part in the medium and put the solid in a mash bag. A mash bag is a bag made of cheese cloth or something like that. It basically will act as a tea back in your cider. So you will still get the benefit of use actual fruits, but you should still get something drinkable at the end.&lt;&#x2F;p&gt;
&lt;p&gt;Juice is definetly the easiest way to go. But whole fruits are fun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-fruits&quot;&gt;Types of Fruits&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Some of my thoughts...&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Apples&lt;&#x2F;em&gt; - A classic. Ferments easily, but not as crazy as the stone fruits. Good flavour. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Berries&lt;&#x2F;em&gt; - I have only tried a few types of berries and usually in a mix. They are expensive where I live usually. So this is a catagory I need to experiment in more. The only thing I will add is that you might need a mash bag (cheesecloth tea bag thing) if you are using berries that might fall apart (blackberries, raspberries, etcß).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Citrus family&lt;&#x2F;em&gt; - I would say leave out citrus, unless you&#x27;re feeling experimental. I found that when I added lemons&#x2F;limes&#x2F;oranges to ciders it typically created something that tasted like dishwashing soap. If you really want something citrus-y&#x2F;sour, I would advise maybe just adding some juice after the first fermentation before bottling.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Ginger&lt;&#x2F;em&gt; - Lovely addition. The ginger flavour persists after fermentation. Adds a bit of warmth...  a bit of a kick... Excellent.	&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Grapes&lt;&#x2F;em&gt; - Fermented well, tasted a bit weird. Was not like wine if that&#x27;s what you&#x27;re thinking. Probably would have done better in a mash bag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Peaches, plums, and other stone fruits&lt;&#x2F;em&gt; - Excellent options. These guys &lt;em&gt;WANT&lt;&#x2F;em&gt; to be fermented. If you are not using an airlock you will have to be careful that your vessel doesn&#x27;t leak or warp or explode. And the flavour works. If stone fruits weren&#x27;t so delicous on their own (and also less expensive) I would be making a lot more of these types of ciders.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-yeast&quot;&gt;Types of Yeast&lt;&#x2F;h2&gt;
&lt;p&gt;Typically you will be advised to use &lt;strong&gt;champagne yeast&lt;&#x2F;strong&gt;. This is a special yeast that is supposed to be able to survive in high alcohol environments. I have had mixed results with it. It doesn&#x27;t matter if you have the best yeast in the world if its dead. Or if you are making cider with no-name peach juice from concentrate for that matter. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Bread and pizza yeast is fine&lt;&#x2F;strong&gt;. I have also used but active dry and instant yeast interchangeably without noticing a difference. &lt;&#x2F;p&gt;
&lt;p&gt;My favourite method is to just use old fruits or organic juice and to not add any yeast directly at all. The main reason is that then there is less yeast by-product in the final drink. But also it&#x27;s easier and another variable that&#x27;s out of my hands and I don&#x27;t have to worry about.&lt;&#x2F;p&gt;
&lt;p&gt;If you are super fancy, you can also use fresh yeast. I think I did this once. No memory of the results though. Take from that what you will.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-sugar&quot;&gt;Types of Sugar&lt;&#x2F;h2&gt;
&lt;p&gt;Besides the sugar that comes along with your fruit&#x2F;juice, you can add sugars like: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;white table sugar&lt;&#x2F;li&gt;
&lt;li&gt;brown sugar&lt;&#x2F;li&gt;
&lt;li&gt;raw sugar &lt;&#x2F;li&gt;
&lt;li&gt;honey&lt;&#x2F;li&gt;
&lt;li&gt;agave syrup &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;White table sugar adds sweetness, without much else. All the other options add sweetness plus their own flavour profile -- so it really just depends on what you&#x27;re into.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;recipes-older-skin-tone-5-fried-egg&quot;&gt;Recipes 🧑🏾‍🍳&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;recipe-dry-organic-cider&quot;&gt;Recipe: Dry Organic Cider&lt;&#x2F;h2&gt;
&lt;p&gt;If you go the organic apple cider route, you don’t have to add any yeast! Or sugar! Also in my experience, organic apple cider got the dryest and most alcoholic, clocking in at about 7%.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ingredients&lt;&#x2F;strong&gt;: Organic Apple Cider.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Time&lt;&#x2F;strong&gt;: About a week.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ABV&lt;&#x2F;strong&gt;: ~7%&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;&#x2F;strong&gt;: Although this is my favourite, I don&#x27;t think it&#x27;s the favourite of most people. The apple taste is completely gone. What remains is difficult to describe. But what can I say, after years of experimentation, this is what my tastebuds drift towards. Also it&#x27;s 7%!!	&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recipe-jungle-juice&quot;&gt;Recipe: Jungle Juice&lt;&#x2F;h2&gt;
&lt;p&gt;Buy the cheapest juices you can find and mix them all together. &lt;&#x2F;p&gt;
&lt;p&gt;I would stay away from citrus heavy blends, but a blend of equal parts: apple, peach, grape, is a crowd pleaser.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ingredients&lt;&#x2F;strong&gt;: Cheap juice. 1&#x2F;4 tsp yeast per litre.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Time&lt;&#x2F;strong&gt;: About a week in warm weather.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ABV&lt;&#x2F;strong&gt;: ~3-4%&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;&#x2F;strong&gt;: I was surprised at how much people like this one. Fancy, fancy people preferred it to the super dry, organic cider (maybe because this is the first one we bottled?). Personally I find it too similar to the juice it once was, and far too sweet (I don&#x27;t like sweets in general though, to an extreme degree). Letting it go for longer never seemed to make it more alcoholic though.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recipe-chunky-jungle-juice&quot;&gt;Recipe: Chunky Jungle Juice&lt;&#x2F;h2&gt;
&lt;p&gt;Chop up a random mix of old (but not rotting) fruits, add water and juice. You probably want about 3-4 apple sized fruits per liter (does that make sense? yes).&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, if you don&#x27;t want to add juice you could add sugar water (but juice would be easier). Or do 50% water &#x2F; 50% juice to bring down the alcohol&#x2F;sweetness of the final product.&lt;&#x2F;p&gt;
&lt;p&gt;This is an excellent beverage to bring out at a party once most people are minimum 3 drinks in. At least in your early 20s. Not sure after that though.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ingredients&lt;&#x2F;strong&gt;: Random fruits. 1&#x2F;4 tsp yeast per litre. Water to fill the vessel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Time&lt;&#x2F;strong&gt;: About a week in warm weather.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ABV&lt;&#x2F;strong&gt;: ~3-4%&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;&#x2F;strong&gt;: Also, if you do the cheapest possible juice route, it will not get as alcoholic and will keep a bit of its sweetness, not sure why. Perhaps the preservatives in the juice are bad for the yeast? I&#x27;m not a scientist.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recipe-dry-hopped-cider&quot;&gt;Recipe: Dry Hopped Cider&lt;&#x2F;h2&gt;
&lt;p&gt;Take the organic apple cider recipe and add a handfull of hops in the secondary fermentation (if you are only doing one fermentation, then the first will do as well).&lt;&#x2F;p&gt;
&lt;p&gt;Add more or less hops depending on how much you like hops. If you are adding dried&#x2F;pellet hops, start with a tsp per liter (even if you like hops). Dried whole hops, you can be a bit more carefree with. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;recipe-ginger-beer&quot;&gt;Recipe: Ginger Beer&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Ingredients&lt;&#x2F;strong&gt;: Some ginger, about 30 cm3 per liter. 4 tbs sugar per liter. 1&#x2F;4 tsp yeast per litre.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Time&lt;&#x2F;strong&gt;: About a week in warm weather.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ABV&lt;&#x2F;strong&gt;: ~3-4% (guessing because I never actually measured this guy)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;&#x2F;strong&gt;: I just peeled and sliced the ginger. Nothing crazy. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;recipe-laziest-cider-of-all-time&quot;&gt;Recipe: Laziest Cider of All Time&lt;&#x2F;h2&gt;
&lt;p&gt;Buy a plastic jug of a couple litres of juice. (any will work, I did this with blue hawaiian punch once). Open it. Add a half tsp of yeast (any). Close and put somewhere warm. Burp every day or two. You should have an alcoholic beverage in a week or so :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Running the Confluent Python Client for Kafka on Apple Silicon&#x2F;M1</title>
		<published>2022-04-14T00:00:00+00:00</published>
		<updated>2022-04-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/02-getting-kafka-on-an-m1/" type="text/html"/>
		<id>https://jxlxx.org/posts/02-getting-kafka-on-an-m1/</id>
		<content type="html">&lt;h1 id=&quot;librdkafka&quot;&gt;&lt;code&gt;Librdkafka&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;confluent-kafka&lt;&#x2F;code&gt; requires &lt;code&gt;librdkafka&lt;&#x2F;code&gt;. &lt;code&gt;brew install librdkafka&lt;&#x2F;code&gt; didn&#x27;t work for me, so I needed to clone the repo and build it. This looks a little convoluted but I simply don&#x27;t feel like investigating and making it cleaner.&lt;&#x2F;p&gt;
&lt;p&gt;Clone the repo and and install the &lt;code&gt;librdkafka&lt;&#x2F;code&gt; dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;edenhill&#x2F;librdkafka.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; librdkafka
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;.&#x2F;configure&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; --install-deps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you need install some more dependecies and do some special things for &lt;code&gt;openssl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; install openssl zstd pkg-config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; link openssl&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; --force
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;&#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;openssl@3&#x2F;bin:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;💡 &lt;strong&gt;Note:&lt;&#x2F;strong&gt; I used the &lt;code&gt;&#x2F;opt&#x2F;homebrew&#x2F;opt&lt;&#x2F;code&gt; path but maybe &lt;code&gt;&#x2F;opt&#x2F;homebrew&#x2F;Cellar&lt;&#x2F;code&gt; makes more sense? But either way it works&lt;&#x2F;p&gt;
&lt;p&gt;And then a bit more configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;.&#x2F;configure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;confluent-kafka&quot;&gt;&lt;code&gt;confluent-kafka&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Now you can install with python, but you need to specify the location of the &lt;code&gt;librdkafka&lt;&#x2F;code&gt; libs like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; pip install&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; --global-option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;build_ext&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; --global-option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;-I&#x2F;usr&#x2F;local&#x2F;include&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt;                      --global-option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;-L&#x2F;usr&#x2F;local&#x2F;lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; confluent-kafka
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;References:
https:&#x2F;&#x2F;github.com&#x2F;confluentinc&#x2F;confluent-kafka-python&#x2F;issues&#x2F;1190&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Installing grpcio on an Apple Silicon&#x2F;M1</title>
		<published>2022-04-14T00:00:00+00:00</published>
		<updated>2022-04-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/02a-getting-grpcio-on-an-m1/" type="text/html"/>
		<id>https://jxlxx.org/posts/02a-getting-grpcio-on-an-m1/</id>
		<content type="html">&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GRPC_BUILD_WITH_BORING_SSL_ASM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GRPC_PYTHON_BUILD_SYSTEM_OPENSSL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GRPC_PYTHON_BUILD_SYSTEM_ZLIB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; pip install grpcio==1.36.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;grpc&#x2F;grpc&#x2F;issues&#x2F;24677&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to use Protobuf with Golang &amp; Kafka</title>
		<published>2022-04-06T00:00:00+00:00</published>
		<updated>2022-04-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jxlxx.org/posts/01-golang-and-kafka-and-protobufs/" type="text/html"/>
		<id>https://jxlxx.org/posts/01-golang-and-kafka-and-protobufs/</id>
		<content type="html">&lt;h1 id=&quot;tldr&quot;&gt;TLDR;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;code&gt;protoc&lt;&#x2F;code&gt; and &lt;code&gt;protogen-go&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Create a &lt;code&gt;.proto&lt;&#x2F;code&gt; file with a structure definition, this is called defining a message type&lt;&#x2F;li&gt;
&lt;li&gt;Use the protoc compiler to generate a &lt;code&gt;*.pb.go&lt;&#x2F;code&gt; file (which is the golang source code that contains all your functionality related to your message type)&lt;&#x2F;li&gt;
&lt;li&gt;Instances of a message type are called messages: &lt;code&gt;msg := pb.ExampleType{}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set data like this: &lt;code&gt;msg := pb.ExampleType{FieldName : &amp;lt;data&amp;gt;}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Add&#x2F;update data like this: &lt;code&gt;msg.FieldName = &amp;lt;data&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Debug printing is done with: &lt;code&gt;proto.Message(&amp;amp;msg)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Serialize your message: &lt;code&gt;proto.Marshal(&amp;amp;msg)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Publish to Kafka topic: &lt;code&gt;Kafka.Message{… Value: serialized_message ….})&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Kafka subscriber receives this Kafka message, deserializes the data via: &lt;code&gt;proto.Unmarshal(kafkaMessage.Value, &amp;amp;msg))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Access fields like this: &lt;code&gt;&amp;amp;msg.GetFieldName()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;bingo bongo that&#x27;s it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Note that I&#x27;m using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;confluentinc&#x2F;confluent-kafka-go&quot;&gt;Confluent&#x27;s implementation of a Golang client&lt;&#x2F;a&gt; for Kafka if it matters!! &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;about-protobuf&quot;&gt;About protobuf&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Protocol Buffers are a mechanism for serializing structured data.&lt;&#x2F;li&gt;
&lt;li&gt;Protobuf is short for protocol buffers&lt;&#x2F;li&gt;
&lt;li&gt;Protobufs are like XML but way smaller.&lt;&#x2F;li&gt;
&lt;li&gt;They are extensible, when you start using them it&#x27;s really easy to maintain backwards compatibility as you change things.&lt;&#x2F;li&gt;
&lt;li&gt;You can use protobuf instead of sending JSON between microservices, or when you want to send structured data in your Kafka messages. It&#x27;s a bit of a time investment initially, but it&#x27;s worth it for typed messages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;probably-unnecessary-but-interesting-details&quot;&gt;Probably unnecessary but interesting details&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Protobufs are an example of an IDL, an Interface Definition Language.&lt;&#x2F;li&gt;
&lt;li&gt;IDLs are a way for two programs written in different languages to communicate with each other.&lt;&#x2F;li&gt;
&lt;li&gt;What&#x27;s the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;19437133&#x2F;difference-between-api-and-idl&quot;&gt;difference between IDL and API&lt;&#x2F;a&gt;? An IDL is a language that can describe APIs, in a platform independent way.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Apache_Avro&quot;&gt;Avro&lt;&#x2F;a&gt; is an IDL that uses JSON if that&#x27;s more your jam.&lt;&#x2F;li&gt;
&lt;li&gt;Protobufs were started in Google and are used in Google&#x27;s internal communication between services. &lt;&#x2F;li&gt;
&lt;li&gt;Google uses an RPC infrastructure called Stubby to connect their zillions of servers. Stubby is google specific, but &lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;gRPC&lt;&#x2F;a&gt; is a generalized open-source RPC framework based on Stubby (and uses protobuf as default). If you see RPC&#x2F;gRPC pop up a lot while researching protobufs, this is why.&lt;&#x2F;li&gt;
&lt;li&gt;RPCs are much beyond the scope of this doc, but basically a way for machines to communicate with one another and execute procedures, and the calling and execution of procedures doesn&#x27;t have to be in the same address space (a call one one machine can be executed on another machine in the same network). Great for highly distributed systems.&lt;&#x2F;li&gt;
&lt;li&gt;Protobufs aren&#x27;t compressed by default, but you can compress them with zip, gzip etc.&lt;&#x2F;li&gt;
&lt;li&gt;Sometimes compression is sub-optimal for data in the form of JPEGs and PNGs, where JPEG&#x2F;PNG compression will do a better job.&lt;&#x2F;li&gt;
&lt;li&gt;When protobuf messages are serialized, the same data can have different binary representations, so you can&#x27;t check for equality on serialized data.&lt;&#x2F;li&gt;
&lt;li&gt;Marshalling is similar or synonymous to serialization, although there may be a slight difference between the two depending on the language or framework. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;protoc-setup&quot;&gt;Protoc Setup&lt;&#x2F;h1&gt;
&lt;p&gt;Go isn&#x27;t actually one of the languages the protobuf compiler (protoc) supports by default, so you have to download a Go plugin, called &lt;code&gt;protogen-go&lt;&#x2F;code&gt;. There are two versions available, the &lt;code&gt;github.com&lt;&#x2F;code&gt; one is depreciated, so use the &lt;code&gt;google.com&lt;&#x2F;code&gt; one. We&#x27;ll talk about this more later.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install google.golang.org&#x2F;protobuf&#x2F;cmd&#x2F;protoc-gen-go@latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;downloading-protoc&quot;&gt;Downloading protoc&lt;&#x2F;h1&gt;
&lt;p&gt;Go to this web page:&lt;code&gt; https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&#x2F;releases&#x2F;&lt;&#x2F;code&gt; and look at the list of latest releases. Download the compressed file that applies to you. I am using Go and Ubuntu, so I downloaded &lt;code&gt;protoc-3.19.4-linux-x86_64.zip&lt;&#x2F;code&gt;, since as of now, &lt;code&gt;3.18.4&lt;&#x2F;code&gt; is the latest version.&lt;&#x2F;p&gt;
&lt;p&gt;Once you download it, unzip into a directory called protoc (that&#x27;s what the -d flag is doing). But this is just for you, you can put this anywhere and name it anything.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;unzip&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; protoc&#x2F; protoc-3.19.4-linux-x86_64.zip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After unzipping, your protoc directory should look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── protoc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; include
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── google
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;       └── protobuf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;           ├── .....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; readme.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As advised by the &lt;code&gt;readme.txt&lt;&#x2F;code&gt;, copy the content of the include directory to &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;include&lt;&#x2F;code&gt; and the protoc binary to somewhere like &lt;code&gt;&#x2F;usr&#x2F;bin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; include&#x2F;google &#x2F;usr&#x2F;local&#x2F;include
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp bin&#x2F;protoc &#x2F;usr&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler, &lt;code&gt;protoc&lt;&#x2F;code&gt;, takes a &lt;code&gt;*.proto&lt;&#x2F;code&gt; file with protocol buffer definition in it and then generates the source code that you use with your applications code. I had a lot of problems with setting up &lt;code&gt;protoc&lt;&#x2F;code&gt;, all path related and really annoying and boring. So I instead did a quick hack, to get up and running quickly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If you have protoc working, skip the next section.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;resolving-my-protoc-issues-in-kind-of-a-gross-way&quot;&gt;Resolving my protoc issues in kind of a gross way&lt;&#x2F;h1&gt;
&lt;p&gt;I tried a slew of things, but I continued to have issues with &lt;code&gt;protoc&lt;&#x2F;code&gt; and paths to things. Since I have better things to do, I did this just to get up and running quickly. I have since changed things on my machine which maybe means I don&#x27;t have to go this route anymore, but honestly who cares. This way I never have to care about my paths and all my &lt;code&gt;*.proto&lt;&#x2F;code&gt; files are together, and it&#x27;s easy to move them where they need to be.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I created a directory (&lt;code&gt;&#x2F;protobuf-generator&lt;&#x2F;code&gt;) where all my other Go repos live (I don&#x27;t use &lt;code&gt;~&#x2F;go&lt;&#x2F;code&gt; because I like making life harder for myself) &lt;&#x2F;li&gt;
&lt;li&gt;and to that I added &lt;code&gt;&#x2F;github.com&lt;&#x2F;code&gt; (from &lt;code&gt;github.com&#x2F;protocolbuffers&#x2F;protobuf&lt;&#x2F;code&gt;, just for the example directory from the official tutorial),&lt;&#x2F;li&gt;
&lt;li&gt;then I added &lt;code&gt;&#x2F;google&lt;&#x2F;code&gt; (from &lt;code&gt;google.golang.org&#x2F;protobuf&#x2F;protec-gen-go&lt;&#x2F;code&gt;, the actual plugin),&lt;&#x2F;li&gt;
&lt;li&gt;and finally &lt;code&gt;protoc&lt;&#x2F;code&gt;, which is the compiler&#x27;s executable binary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s what all that looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; go-application
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├── go.mod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├── go.sum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├── main.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── proto-definitions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;       └── example.pb.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; protobuf-generator
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; example.pb.go
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; example.proto
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; github.com
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── ......
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; google
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── protobuf
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;       ├── ....
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; protoc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So I create my protobuf generated classes directly in &lt;code&gt;protobuf-generator&lt;&#x2F;code&gt;, and then slap them into &lt;code&gt;go-application&#x2F;proto-definitions&lt;&#x2F;code&gt;. I actually wrote a little bash script to make feel cleaner and to somewhat automate it. I called it something like &lt;code&gt;run_protoc.sh&lt;&#x2F;code&gt;, and it contains:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;protoc&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; -I&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; --go_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F; .&#x2F;example.proto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; example.pb.go ..&#x2F;go-application&#x2F;proto-definitions
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; example.proto ..&#x2F;go-application&#x2F;proto-definitions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# so that .proto is in your app&amp;#39;s repo
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Protobufs Updated!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;Oopsie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run it, &lt;code&gt;chmod&lt;&#x2F;code&gt; it (so it&#x27;s executable) and then run like a regular script.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; a+x run_protoc.sh  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# do this once
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;.&#x2F;run_protoc.sh   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;# do this whenever you update example.proto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then for example, to reference the message definitions in &lt;code&gt;main.go&lt;&#x2F;code&gt; I have:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	.
&lt;&#x2F;span&gt;&lt;span&gt;	.
&lt;&#x2F;span&gt;&lt;span&gt;	.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;github.com&#x2F;confluentinc&#x2F;confluent-kafka-go&#x2F;kafka&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;google.golang.org&#x2F;protobuf&#x2F;proto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;github.com&#x2F;mygithub&#x2F;go-application&#x2F;proto-definitions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also &lt;code&gt;package&lt;&#x2F;code&gt; in &lt;code&gt;example.proto&lt;&#x2F;code&gt; should be set to whatever &lt;code&gt;proto-definitions&lt;&#x2F;code&gt; is actually called. And don&#x27;t make &lt;code&gt;proto-definitons&lt;&#x2F;code&gt; a module.&lt;&#x2F;p&gt;
&lt;p&gt;And these are &lt;strong&gt;not&lt;&#x2F;strong&gt; the names I use!! Using something as generic as &lt;code&gt;&#x2F;proto-definitons&lt;&#x2F;code&gt; is super frowned upon in Go, so choose something more specific and descriptive (like the name of your most relevant message definition).&lt;&#x2F;p&gt;
&lt;p&gt;To clarify  -- because this is a mess --  these are what the paths look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;mygithub&#x2F;go-application&#x2F;proto-definitions
&lt;&#x2F;span&gt;&lt;span&gt;~&#x2F;go&#x2F;src&#x2F;github.com&#x2F;mygithub&#x2F;protobuf-generator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And don&#x27;t forget to double check your Go environment variables are correct and exist (don&#x27;t ask me why I didn&#x27;t just have this in my &lt;code&gt;.zshrc&lt;&#x2F;code&gt;, I don&#x27;t have an answer. But they are in there now).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;go-project-dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOBIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;&#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GOBIN
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you check &lt;code&gt;$GOBIN&lt;&#x2F;code&gt;, you should have the binary of the &lt;code&gt;protoc-gen-go&lt;&#x2F;code&gt; plugin.
So with all this you can generate protobuf classes and use types in your message definitions provided by protobuf, like &lt;code&gt;timestamp&lt;&#x2F;code&gt; (&lt;code&gt;&amp;quot;google&#x2F;protobuf&#x2F;timestamp.proto&amp;quot;&lt;&#x2F;code&gt;). And use the &lt;code&gt;example&#x2F;tutorial&lt;&#x2F;code&gt; from the official protobuf&#x2F;Go tutorial.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;generating-protobufs-files-pb-go&quot;&gt;Generating protobufs files (*.pb.go)&lt;&#x2F;h1&gt;
&lt;p&gt;Creating &lt;code&gt;*.proto files&lt;&#x2F;code&gt; is easy and fun. The tutorial is really clear on this front. Here&#x27;s an example from the official Go&#x2F;protobuf tutorial, with all the essentials:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;syntax = &amp;quot;proto3&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;package tutorial;
&lt;&#x2F;span&gt;&lt;span&gt;import &amp;quot;google&#x2F;protobuf&#x2F;timestamp.proto&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;option go_package = &amp;quot;.&#x2F;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;message Person {
&lt;&#x2F;span&gt;&lt;span&gt;  string name = 1;
&lt;&#x2F;span&gt;&lt;span&gt;  int32 id = 2;  &#x2F;&#x2F; Unique ID number for this person.
&lt;&#x2F;span&gt;&lt;span&gt;  string email = 3;
&lt;&#x2F;span&gt;&lt;span&gt;  enum PhoneType {
&lt;&#x2F;span&gt;&lt;span&gt;    MOBILE = 0;
&lt;&#x2F;span&gt;&lt;span&gt;    HOME = 1;
&lt;&#x2F;span&gt;&lt;span&gt;    WORK = 2;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  message PhoneNumber {
&lt;&#x2F;span&gt;&lt;span&gt;    string number = 1;
&lt;&#x2F;span&gt;&lt;span&gt;    PhoneType type = 2;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  repeated PhoneNumber phones = 4;
&lt;&#x2F;span&gt;&lt;span&gt;  google.protobuf.Timestamp last_updated = 5;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Our address book file is just one of these.
&lt;&#x2F;span&gt;&lt;span&gt;message AddressBook {
&lt;&#x2F;span&gt;&lt;span&gt;  repeated Person people = 1;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;option go_package&lt;&#x2F;code&gt; is where the generated class of (&lt;code&gt;&amp;lt;example&amp;gt;.pb.go&lt;&#x2F;code&gt;) will be output.
&lt;code&gt;package&lt;&#x2F;code&gt; will be the name of the folder where the &lt;code&gt;&amp;lt;example&amp;gt;.pb.go&lt;&#x2F;code&gt; file will live. If you are following what I&#x27;ve been doing it&#x27;s &lt;code&gt;proto-definitions&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;So now to compile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;protoc&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; -I&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fc9354;&quot;&gt; --go_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F; .&#x2F;example.proto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-I&lt;&#x2F;code&gt; is the source directory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--go_out&lt;&#x2F;code&gt; is telling &lt;code&gt;protoc&lt;&#x2F;code&gt; you want go code, the directory where it should go&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the most part it&#x27;s really easy, but I have not needed to do anything complex with them yet. For general information on defining message types see: https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;gotutorial&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;for real, look at this:&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;gotutorial&quot;&gt;developers.google.com&#x2F;protocol-buffers&lt;&#x2F;a&gt; It&#x27;s explained really well.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And you&#x27;re all done with setup, now you have your protobuf class ready and you can begin using protobufs within your project!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;programming-with-protobufs&quot;&gt;Programming with protobufs&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;fields&quot;&gt;Fields&lt;&#x2F;h2&gt;
&lt;p&gt;You name your fields in &lt;code&gt;snake_case&lt;&#x2F;code&gt; and &lt;code&gt;protoc&lt;&#x2F;code&gt; will convert them to &lt;code&gt;CamelCase&lt;&#x2F;code&gt;. (This is what the style guide says to do).&lt;&#x2F;p&gt;
&lt;p&gt;For example: &lt;code&gt;my_field&lt;&#x2F;code&gt; becomes &lt;code&gt;MyField&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Also note that: &lt;code&gt;_my_Field&lt;&#x2F;code&gt; becomes &lt;code&gt;XMyField&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nested messages are like the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;message Foo {
&lt;&#x2F;span&gt;&lt;span&gt;		message Bar {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; defines two structs: Foo, Foo_Bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OneOf is pretty neat:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;message Profile {
&lt;&#x2F;span&gt;&lt;span&gt;		oneof avatar {
&lt;&#x2F;span&gt;&lt;span&gt;				string image_url = 1;
&lt;&#x2F;span&gt;&lt;span&gt;				bytes image_data = 2;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Dynamic length arrays:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;message Example {
&lt;&#x2F;span&gt;&lt;span&gt;		repeated int32 lot_of_numbers = 1;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;enums-defining-and-setting&quot;&gt;Enums (defining and setting)&lt;&#x2F;h2&gt;
&lt;p&gt;Defined like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;message Convo {
&lt;&#x2F;span&gt;&lt;span&gt;	enum GreetingType {
&lt;&#x2F;span&gt;&lt;span&gt;	      HI = 0;
&lt;&#x2F;span&gt;&lt;span&gt;	      HELLO = 1;
&lt;&#x2F;span&gt;&lt;span&gt;	      HEY = 2;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	Greeting my_greeting = 1; &#x2F;&#x2F; this setting the tag, not the value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The have to have one at 0, because 0 is the default and everything must have a default value. It also has to be first.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose you get some input&#x2F;data from somewhere with &amp;quot;HELLO&amp;quot; in it, and that&#x27;s what you want to set your enum field to, you can go this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;HELLO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Convo&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;MyGreeting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Convo_GreetingType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;convo_GreetingType_value&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;I said: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;%s\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;GetMyGreeting&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; output: I said: HELLO
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;printing-messages&quot;&gt;Printing messages&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to see everything that&#x27;s in your message then do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fbe3bf;&quot;&gt;My Message:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;%s\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;)) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; output: My Message: MyGreeting:HELLO
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;serializing-messages&quot;&gt;Serializing Messages&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ExampleType&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; .... do some things with msg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;buff&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;deserializing-messages&quot;&gt;Deserializing Messages&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;serialized_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; ..... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ExampleType&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Unmarshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;serialized_data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;protobufs-in-kafka-messages&quot;&gt;Protobufs in Kafka messages&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; .................... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Subscriber
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;kafka_msg&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;consumer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ReadMessage&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;my_example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ExampleType&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Unmarshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;my_example&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdb082;&quot;&gt;\n%s\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;my_example&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; Publisher
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;another_example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ExampleType&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; do stuff with another_example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;buff&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;another_example&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;producer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Produce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;kafka&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;TopicPartition&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;my_partition&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;buff&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;my_delivery_chan&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; .....................
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;protobuf-on-the-frontend&quot;&gt;Protobuf on the frontend&lt;&#x2F;h1&gt;
&lt;p&gt;I haven&#x27;t done this yet, and it may be a while before I do. I am rewriting the backend of an app and I am going to use the corresponding frontend which expects JSON. This is actually maybe not a great idea to be honest because according to the &lt;code&gt;protojson&lt;&#x2F;code&gt; documentation, the conversion from &lt;code&gt;proto.Message&lt;&#x2F;code&gt; to &lt;code&gt;JSON&lt;&#x2F;code&gt; via &lt;code&gt;protojson.Marshal&lt;&#x2F;code&gt; is not stable, and it recommends to not rely on it. But anyhoo this is what I do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#191919;color:#f8f8f2;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:=  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; serialized Kafka message, it contains message with ExampleType structure
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;ExampleType&lt;&#x2F;span&gt;&lt;span&gt;{} 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;proto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Unmarshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; deserialize my Kafka message
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; check for errors or something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;json_message&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff5e5e;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;protojson&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e9fdac;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; convert to json in a byte array
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6d6d6d;&quot;&gt;&#x2F;&#x2F; send json_message, which is of type []byte,  an array of bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think this a good resource if you would like to send back protobuf messages instead: https:&#x2F;&#x2F;techblog.livongo.com&#x2F;how-to-use-grpc-and-protobuf-with-javascript-and-reactjs&#x2F;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;protobuf-and-databases&quot;&gt;Protobuf and databases&lt;&#x2F;h1&gt;
&lt;p&gt;This looks pretty cool if you want to use GORM (a popular Golang ORM) to store protobuf structures in a DB: https:&#x2F;&#x2F;github.com&#x2F;infobloxopen&#x2F;protoc-gen-gorm&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
